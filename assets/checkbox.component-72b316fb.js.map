{"version":3,"file":"checkbox.component-72b316fb.js","sources":["../../node_modules/@radix-ui/react-checkbox/dist/index.mjs","../../src/components/checkbox/checkbox.component.tsx"],"sourcesContent":["import $1bpvS$babelruntimehelpersesmextends from \"@babel/runtime/helpers/esm/extends\";\nimport {forwardRef as $1bpvS$forwardRef, useState as $1bpvS$useState, useRef as $1bpvS$useRef, useEffect as $1bpvS$useEffect, createElement as $1bpvS$createElement} from \"react\";\nimport {useComposedRefs as $1bpvS$useComposedRefs} from \"@radix-ui/react-compose-refs\";\nimport {createContextScope as $1bpvS$createContextScope} from \"@radix-ui/react-context\";\nimport {composeEventHandlers as $1bpvS$composeEventHandlers} from \"@radix-ui/primitive\";\nimport {useControllableState as $1bpvS$useControllableState} from \"@radix-ui/react-use-controllable-state\";\nimport {usePrevious as $1bpvS$usePrevious} from \"@radix-ui/react-use-previous\";\nimport {useSize as $1bpvS$useSize} from \"@radix-ui/react-use-size\";\nimport {Presence as $1bpvS$Presence} from \"@radix-ui/react-presence\";\nimport {Primitive as $1bpvS$Primitive} from \"@radix-ui/react-primitive\";\n\n\n\n\n\n\n\n\n\n\n\n/* -------------------------------------------------------------------------------------------------\n * Checkbox\n * -----------------------------------------------------------------------------------------------*/ const $e698a72e93240346$var$CHECKBOX_NAME = 'Checkbox';\nconst [$e698a72e93240346$var$createCheckboxContext, $e698a72e93240346$export$b566c4ff5488ea01] = $1bpvS$createContextScope($e698a72e93240346$var$CHECKBOX_NAME);\nconst [$e698a72e93240346$var$CheckboxProvider, $e698a72e93240346$var$useCheckboxContext] = $e698a72e93240346$var$createCheckboxContext($e698a72e93240346$var$CHECKBOX_NAME);\nconst $e698a72e93240346$export$48513f6b9f8ce62d = /*#__PURE__*/ $1bpvS$forwardRef((props, forwardedRef)=>{\n    const { __scopeCheckbox: __scopeCheckbox , name: name , checked: checkedProp , defaultChecked: defaultChecked , required: required , disabled: disabled , value: value = 'on' , onCheckedChange: onCheckedChange , ...checkboxProps } = props;\n    const [button, setButton] = $1bpvS$useState(null);\n    const composedRefs = $1bpvS$useComposedRefs(forwardedRef, (node)=>setButton(node)\n    );\n    const hasConsumerStoppedPropagationRef = $1bpvS$useRef(false); // We set this to true by default so that events bubble to forms without JS (SSR)\n    const isFormControl = button ? Boolean(button.closest('form')) : true;\n    const [checked = false, setChecked] = $1bpvS$useControllableState({\n        prop: checkedProp,\n        defaultProp: defaultChecked,\n        onChange: onCheckedChange\n    });\n    const initialCheckedStateRef = $1bpvS$useRef(checked);\n    $1bpvS$useEffect(()=>{\n        const form = button === null || button === void 0 ? void 0 : button.form;\n        if (form) {\n            const reset = ()=>setChecked(initialCheckedStateRef.current)\n            ;\n            form.addEventListener('reset', reset);\n            return ()=>form.removeEventListener('reset', reset)\n            ;\n        }\n    }, [\n        button,\n        setChecked\n    ]);\n    return /*#__PURE__*/ $1bpvS$createElement($e698a72e93240346$var$CheckboxProvider, {\n        scope: __scopeCheckbox,\n        state: checked,\n        disabled: disabled\n    }, /*#__PURE__*/ $1bpvS$createElement($1bpvS$Primitive.button, $1bpvS$babelruntimehelpersesmextends({\n        type: \"button\",\n        role: \"checkbox\",\n        \"aria-checked\": $e698a72e93240346$var$isIndeterminate(checked) ? 'mixed' : checked,\n        \"aria-required\": required,\n        \"data-state\": $e698a72e93240346$var$getState(checked),\n        \"data-disabled\": disabled ? '' : undefined,\n        disabled: disabled,\n        value: value\n    }, checkboxProps, {\n        ref: composedRefs,\n        onKeyDown: $1bpvS$composeEventHandlers(props.onKeyDown, (event)=>{\n            // According to WAI ARIA, Checkboxes don't activate on enter keypress\n            if (event.key === 'Enter') event.preventDefault();\n        }),\n        onClick: $1bpvS$composeEventHandlers(props.onClick, (event)=>{\n            setChecked((prevChecked)=>$e698a72e93240346$var$isIndeterminate(prevChecked) ? true : !prevChecked\n            );\n            if (isFormControl) {\n                hasConsumerStoppedPropagationRef.current = event.isPropagationStopped(); // if checkbox is in a form, stop propagation from the button so that we only propagate\n                // one click event (from the input). We propagate changes from an input so that native\n                // form validation works and form events reflect checkbox updates.\n                if (!hasConsumerStoppedPropagationRef.current) event.stopPropagation();\n            }\n        })\n    })), isFormControl && /*#__PURE__*/ $1bpvS$createElement($e698a72e93240346$var$BubbleInput, {\n        control: button,\n        bubbles: !hasConsumerStoppedPropagationRef.current,\n        name: name,\n        value: value,\n        checked: checked,\n        required: required,\n        disabled: disabled // We transform because the input is absolutely positioned but we have\n        ,\n        style: {\n            transform: 'translateX(-100%)'\n        }\n    }));\n});\n/*#__PURE__*/ Object.assign($e698a72e93240346$export$48513f6b9f8ce62d, {\n    displayName: $e698a72e93240346$var$CHECKBOX_NAME\n});\n/* -------------------------------------------------------------------------------------------------\n * CheckboxIndicator\n * -----------------------------------------------------------------------------------------------*/ const $e698a72e93240346$var$INDICATOR_NAME = 'CheckboxIndicator';\nconst $e698a72e93240346$export$59aad738f51d1c05 = /*#__PURE__*/ $1bpvS$forwardRef((props, forwardedRef)=>{\n    const { __scopeCheckbox: __scopeCheckbox , forceMount: forceMount , ...indicatorProps } = props;\n    const context = $e698a72e93240346$var$useCheckboxContext($e698a72e93240346$var$INDICATOR_NAME, __scopeCheckbox);\n    return /*#__PURE__*/ $1bpvS$createElement($1bpvS$Presence, {\n        present: forceMount || $e698a72e93240346$var$isIndeterminate(context.state) || context.state === true\n    }, /*#__PURE__*/ $1bpvS$createElement($1bpvS$Primitive.span, $1bpvS$babelruntimehelpersesmextends({\n        \"data-state\": $e698a72e93240346$var$getState(context.state),\n        \"data-disabled\": context.disabled ? '' : undefined\n    }, indicatorProps, {\n        ref: forwardedRef,\n        style: {\n            pointerEvents: 'none',\n            ...props.style\n        }\n    })));\n});\n/*#__PURE__*/ Object.assign($e698a72e93240346$export$59aad738f51d1c05, {\n    displayName: $e698a72e93240346$var$INDICATOR_NAME\n});\n/* ---------------------------------------------------------------------------------------------- */ const $e698a72e93240346$var$BubbleInput = (props)=>{\n    const { control: control , checked: checked , bubbles: bubbles = true , ...inputProps } = props;\n    const ref = $1bpvS$useRef(null);\n    const prevChecked = $1bpvS$usePrevious(checked);\n    const controlSize = $1bpvS$useSize(control); // Bubble checked change to parents (e.g form change event)\n    $1bpvS$useEffect(()=>{\n        const input = ref.current;\n        const inputProto = window.HTMLInputElement.prototype;\n        const descriptor = Object.getOwnPropertyDescriptor(inputProto, 'checked');\n        const setChecked = descriptor.set;\n        if (prevChecked !== checked && setChecked) {\n            const event = new Event('click', {\n                bubbles: bubbles\n            });\n            input.indeterminate = $e698a72e93240346$var$isIndeterminate(checked);\n            setChecked.call(input, $e698a72e93240346$var$isIndeterminate(checked) ? false : checked);\n            input.dispatchEvent(event);\n        }\n    }, [\n        prevChecked,\n        checked,\n        bubbles\n    ]);\n    return /*#__PURE__*/ $1bpvS$createElement(\"input\", $1bpvS$babelruntimehelpersesmextends({\n        type: \"checkbox\",\n        \"aria-hidden\": true,\n        defaultChecked: $e698a72e93240346$var$isIndeterminate(checked) ? false : checked\n    }, inputProps, {\n        tabIndex: -1,\n        ref: ref,\n        style: {\n            ...props.style,\n            ...controlSize,\n            position: 'absolute',\n            pointerEvents: 'none',\n            opacity: 0,\n            margin: 0\n        }\n    }));\n};\nfunction $e698a72e93240346$var$isIndeterminate(checked) {\n    return checked === 'indeterminate';\n}\nfunction $e698a72e93240346$var$getState(checked) {\n    return $e698a72e93240346$var$isIndeterminate(checked) ? 'indeterminate' : checked ? 'checked' : 'unchecked';\n}\nconst $e698a72e93240346$export$be92b6f5f03c0fe9 = $e698a72e93240346$export$48513f6b9f8ce62d;\nconst $e698a72e93240346$export$adb584737d712b70 = $e698a72e93240346$export$59aad738f51d1c05;\n\n\n\n\nexport {$e698a72e93240346$export$b566c4ff5488ea01 as createCheckboxScope, $e698a72e93240346$export$48513f6b9f8ce62d as Checkbox, $e698a72e93240346$export$59aad738f51d1c05 as CheckboxIndicator, $e698a72e93240346$export$be92b6f5f03c0fe9 as Root, $e698a72e93240346$export$adb584737d712b70 as Indicator};\n//# sourceMappingURL=index.mjs.map\n","import { CheckboxProps, Indicator, Root } from '@radix-ui/react-checkbox';\nimport * as React from 'react';\n\nimport { IBindingProps, useBindingState, ValidationMessage } from '../../form';\nimport { ArmstrongFCExtensions, ArmstrongFCProps, ArmstrongFCReturn, DisplaySize, NullOrUndefined } from '../../types';\nimport { concat } from '../../utils/classNames';\nimport { useArmstrongConfig } from '../config';\nimport { ILabelProps, Label } from '../label/label.component';\nimport { IStatusWrapperProps, StatusWrapper } from '../statusWrapper/statusWrapper.component';\nimport { IValidationErrorsProps, ValidationErrors } from '../validationErrors/validationErrors.component';\n\nimport './checkbox.theme.css';\n\ntype BindType = NullOrUndefined<boolean | 'indeterminate'>;\n\nexport interface ICheckboxProps<TData extends BindType>\n  extends Omit<React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLDivElement>, HTMLDivElement>, 'type' | 'checked'>,\n    Omit<IValidationErrorsProps, 'validationErrors' | 'scrollIntoView'>,\n    Pick<ILabelProps, 'required' | 'requiredIndicator'>,\n    Pick<IStatusWrapperProps, 'statusPosition'> {\n  /** (Optional) An IBindingProps<TData> object to bind the checkbox input to a form. */\n  bind?: IBindingProps<TData>;\n\n  /** (Optional) A TData value representing the initial checked state of the checkbox. This can be true, false, or 'indeterminate'. */\n  checked?: TData;\n\n  /** (Optional) A custom JSX.Element for the indeterminate state indicator. */\n  customIndeterminateIndicator?: JSX.Element;\n\n  /** (Optional) A custom JSX.Element for the checked indicator. */\n  customIndicator?: JSX.Element;\n\n  /** (Optional) A boolean flag to disable the checkbox input. */\n  disabled?: boolean;\n\n  /** (Optional) A React.ReactNode to display a label for the checkbox input. */\n  label?: React.ReactNode;\n\n  /** (Optional) Class name for the label component */\n  labelClassName?: string;\n\n  /** (Optional) Id to use for the checkbox. Falls back to React ID if not provided */\n  labelId?: string;\n\n  /** (Optional) A callback function (newValue: TData) => void to handle state when 'checked' is changed. */\n  onCheckedChange?: (newValue: TData) => void;\n\n  /** (Optional) Classname to use for the status wrapper */\n  statusClassName?: string;\n\n  /** (Optional) A string to set a custom data-testid attribute for the checkbox container. */\n  testId?: string;\n\n  /** (Optional) Class name for the validation errors */\n  validationErrorsClassName?: string;\n\n  /** (Optional) Can be a string or {key, element} key is necessary for animating in new messages   */\n  validationErrorMessages?: ValidationMessage[];\n\n  /** (Optional) A boolean flag to automatically scroll validation error messages into view. */\n  scrollValidationErrorsIntoView?: boolean;\n\n  /** which size variant to use */\n  displaySize?: DisplaySize;\n}\n\nexport const Checkbox = React.forwardRef<HTMLButtonElement, ICheckboxProps<BindType>>(\n  (\n    {\n      bind,\n      checked,\n      customIndicator,\n      className,\n      customIndeterminateIndicator,\n      disabled,\n      onCheckedChange,\n      label,\n      labelClassName,\n      labelId,\n      scrollValidationErrorsIntoView,\n      statusClassName,\n      testId,\n      validationErrorsClassName,\n      validationErrorMessages,\n      validationMode,\n      displaySize,\n      required,\n      requiredIndicator,\n      statusPosition,\n      ...nativeProps\n    },\n    ref\n  ) => {\n    const reactId = React.useId();\n    const id = nativeProps.id ?? reactId;\n\n    const globals = useArmstrongConfig({\n      scrollValidationErrorsIntoView,\n      checkboxCustomIndicator: customIndicator,\n      checkboxCustomIndeterminateIndicator: customIndeterminateIndicator,\n      requiredIndicator,\n      inputStatusPosition: statusPosition,\n      validationMode,\n      inputDisplaySize: displaySize,\n    });\n\n    const [boundValue, setBoundValue, bindConfig] = useBindingState(bind, {\n      value: checked,\n      onChange: onCheckedChange,\n      validationErrorMessages,\n      validationMode: globals.validationMode,\n    });\n\n    const onCheckedChangeInternal = React.useCallback<Required<CheckboxProps>['onCheckedChange']>(\n      newValue => {\n        setBoundValue?.(newValue);\n      },\n      [setBoundValue]\n    );\n\n    const indicator = React.useMemo(() => {\n      switch (boundValue) {\n        case 'indeterminate':\n          return globals.checkboxCustomIndeterminateIndicator;\n        default:\n          return globals.checkboxCustomIndicator;\n      }\n    }, [boundValue, globals.checkboxCustomIndicator, globals.checkboxCustomIndeterminateIndicator]);\n\n    return (\n      <StatusWrapper\n        className={concat(statusClassName, 'arm-input-base')}\n        validationMode={bindConfig.validationMode}\n        errorIcon={bindConfig.validationErrorIcon}\n        statusPosition={globals.inputStatusPosition}\n      >\n        <div\n          className={concat('arm-checkbox-container', className)}\n          data-disabled={disabled}\n          data-testid={testId}\n          data-size={globals.inputDisplaySize}\n          {...nativeProps}\n        >\n          <Root\n            className=\"arm-checkbox\"\n            disabled={disabled}\n            id={id}\n            checked={boundValue ?? undefined}\n            onCheckedChange={onCheckedChangeInternal}\n            ref={ref}\n          >\n            <Indicator className=\"arm-checkbox-indicator\" asChild>\n              {indicator}\n            </Indicator>\n          </Root>\n\n          {label && (\n            <Label\n              className={concat('arm-checkbox-label', labelClassName)}\n              data-disabled={disabled}\n              htmlFor={id}\n              required={required}\n              requiredIndicator={globals.requiredIndicator}\n              displaySize={globals.inputDisplaySize}\n            >\n              {label}\n            </Label>\n          )}\n        </div>\n        {!!bindConfig.validationErrorMessages?.length && bindConfig.shouldShowValidationErrorMessage && (\n          <ValidationErrors\n            className={validationErrorsClassName}\n            validationMode={globals.validationMode}\n            validationErrors={bindConfig.validationErrorMessages}\n            scrollIntoView={globals.scrollValidationErrorsIntoView}\n          />\n        )}\n      </StatusWrapper>\n    );\n  }\n) as (<TBind extends NullOrUndefined<boolean>>(\n  props: ArmstrongFCProps<ICheckboxProps<TBind>, HTMLInputElement>\n) => ArmstrongFCReturn) &\n  ArmstrongFCExtensions<ICheckboxProps<NullOrUndefined<boolean>>>;\n\nCheckbox.displayName = 'Checkbox';\n"],"names":["$e698a72e93240346$var$CHECKBOX_NAME","$e698a72e93240346$var$createCheckboxContext","$e698a72e93240346$export$b566c4ff5488ea01","$1bpvS$createContextScope","$e698a72e93240346$var$CheckboxProvider","$e698a72e93240346$var$useCheckboxContext","$e698a72e93240346$export$48513f6b9f8ce62d","$1bpvS$forwardRef","props","forwardedRef","__scopeCheckbox","name","checkedProp","defaultChecked","required","disabled","value","onCheckedChange","checkboxProps","button","setButton","$1bpvS$useState","composedRefs","$1bpvS$useComposedRefs","node","hasConsumerStoppedPropagationRef","$1bpvS$useRef","isFormControl","checked","setChecked","$1bpvS$useControllableState","initialCheckedStateRef","$1bpvS$useEffect","form","reset","$1bpvS$createElement","$1bpvS$Primitive","$1bpvS$babelruntimehelpersesmextends","$e698a72e93240346$var$isIndeterminate","$e698a72e93240346$var$getState","$1bpvS$composeEventHandlers","event","prevChecked","$e698a72e93240346$var$BubbleInput","$e698a72e93240346$var$INDICATOR_NAME","$e698a72e93240346$export$59aad738f51d1c05","forceMount","indicatorProps","context","$1bpvS$Presence","control","bubbles","inputProps","ref","$1bpvS$usePrevious","controlSize","$1bpvS$useSize","input","inputProto","$e698a72e93240346$export$be92b6f5f03c0fe9","$e698a72e93240346$export$adb584737d712b70","Checkbox","React.forwardRef","bind","customIndicator","className","customIndeterminateIndicator","label","labelClassName","labelId","scrollValidationErrorsIntoView","statusClassName","testId","validationErrorsClassName","validationErrorMessages","validationMode","displaySize","requiredIndicator","statusPosition","nativeProps","reactId","React.useId","id","globals","useArmstrongConfig","boundValue","setBoundValue","bindConfig","useBindingState","onCheckedChangeInternal","React.useCallback","newValue","indicator","React.useMemo","jsxs","StatusWrapper","concat","jsx","Root","Indicator","Label","_a","ValidationErrors"],"mappings":"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","x_google_ignoreList":[0]}