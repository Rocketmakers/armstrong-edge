{"version":3,"file":"maths-23377890.js","sources":["../../src/utils/maths.ts"],"sourcesContent":["/** Get a number, clamped to a maximum and minimum */\nexport function clamp(input: number, minimum: number, maximum: number): number {\n  return Math.min(Math.max(input, minimum), maximum);\n}\n\n/**\n * Perform a modulo operation that ensures that the output is always positive - javascript modulos behave unusually with negative numbers\n * see: https://web.archive.org/web/20090717035140if_/javascript.about.com/od/problemsolving/a/modulobug.htm\n */\nexport function positiveModulo(numerator: number, denominator: number): number {\n  return ((numerator % denominator) + denominator) % denominator;\n}\n\n/**\n * Get a value as a percent of another value\n */\nexport function getPercent(value: number, total: number) {\n  return (value / total) * 100;\n}\n\n/** lerp between two numbers based on a progress */\nexport function lerp(start: number, end: number, /** out of 100 */ progress: number): number {\n  const clampedProgress = clamp(progress, 0, 100);\n\n  return start + ((end - start) / 100) * clampedProgress;\n}\n\n/** lerp between multiple numbers, with equally spaced breakpoints */\nexport function multiLerp(breakpoints: number[], progress: number): number {\n  const clampedProgress = clamp(progress, 0, 100);\n  const breakpointSpacing = 100 / (breakpoints.length - 1);\n\n  const previousBreakpointIndex = Math.floor(clampedProgress / breakpointSpacing);\n  const nextBreakpointIndex = previousBreakpointIndex + 1;\n\n  if (previousBreakpointIndex === breakpoints.length - 1) {\n    return breakpoints[breakpoints.length - 1];\n  }\n\n  const previousBreakpoint = breakpoints[previousBreakpointIndex];\n  const nextBreakpoint = breakpoints[nextBreakpointIndex];\n\n  const previousBreakpointPercent = breakpointSpacing * previousBreakpointIndex;\n  const pointProgress = (clampedProgress - previousBreakpointPercent) * (100 / breakpointSpacing);\n\n  return lerp(previousBreakpoint, nextBreakpoint, pointProgress);\n}\n"],"names":["clamp","input","minimum","maximum"],"mappings":"AACgB,SAAAA,EAAMC,EAAeC,EAAiBC,EAAyB,CAC7E,OAAO,KAAK,IAAI,KAAK,IAAIF,EAAOC,CAAO,EAAGC,CAAO,CACnD"}