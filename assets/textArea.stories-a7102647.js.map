{"version":3,"file":"textArea.stories-a7102647.js","sources":["../../src/components/textArea/textArea.component.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { IBindingProps, useBindingState } from '../../form';\nimport { useDebounce } from '../../hooks/useDebounce';\nimport { ArmstrongFCExtensions, ArmstrongFCProps, ArmstrongFCReturn, DisplaySize, NullOrUndefined } from '../../types';\nimport { concat } from '../../utils/classNames';\nimport { useArmstrongConfig } from '../config';\nimport { IInputWrapperProps, InputWrapper } from '../inputWrapper/inputWrapper.component';\n\nimport './textArea.theme.css';\n\ntype NativeTextAreaProps = Omit<\n  React.DetailedHTMLProps<React.TextareaHTMLAttributes<HTMLTextAreaElement>, HTMLTextAreaElement>,\n  'value' | 'ref'\n>;\n\ninterface IDelayedTextAreaBaseProps<TValue> extends NativeTextAreaProps {\n  /** The time in ms to delay the debounce or throttle effect. */\n  milliseconds: number;\n\n  /** Called when the value changes, takes into account any delay values and other effects. */\n  onValueChange: (value: TValue | undefined) => void;\n\n  /** The current value of the input */\n  value?: TValue;\n}\n\nconst DebounceTextAreaBase = React.forwardRef<HTMLTextAreaElement, IDelayedTextAreaBaseProps<string>>(\n  ({ milliseconds, value, onValueChange, onChange, ...nativeProps }, ref) => {\n    const [actualValue, setActualValue] = useDebounce(milliseconds, value, onValueChange);\n\n    const onChangeEvent = React.useCallback(\n      (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setActualValue(e.currentTarget.value);\n        onChange?.(e);\n      },\n      [setActualValue, onChange]\n    );\n\n    return <textarea ref={ref} value={actualValue} onChange={onChangeEvent} {...nativeProps} />;\n  }\n);\n\nDebounceTextAreaBase.displayName = 'DebounceInput';\n\ninterface ITextAreaProps<TValue extends NullOrUndefined<string> | NullOrUndefined<number>>\n  extends NativeTextAreaProps,\n    Omit<IInputWrapperProps, 'onClick' | 'onValueChange'> {\n  /** A class name to apply to the input element */\n  textAreaClassName?: string;\n\n  /**  prop for binding to an Armstrong form binder (see forms documentation) */\n  bind?: IBindingProps<TValue>;\n\n  /** Called when the value changes, takes into account any delay values and other effects. */\n  onValueChange?: (value?: TValue) => void;\n\n  /** The delay config, used to set throttle and debounce values. */\n  delay?: number;\n\n  /** The current value of the input */\n  value?: TValue;\n\n  /** which size variant to use */\n  displaySize?: DisplaySize;\n\n  /** A callback function to handle onChange event */\n  onChange?: (e: React.ChangeEvent<HTMLTextAreaElement>) => void;\n\n  /** An ID for the label to use when testing  */\n  testId?: string;\n}\n\n/** A component which wraps up a native text area element with some binding logic, labels and validation errors. */\nexport const TextArea = React.forwardRef<HTMLTextAreaElement, ITextAreaProps<string>>(\n  (\n    {\n      bind,\n      onChange,\n      value,\n      className,\n      validationErrorMessages,\n      validationMode,\n      pending,\n      disabled,\n      disableOnPending,\n      onValueChange,\n      scrollValidationErrorsIntoView,\n      delay,\n      validationErrorsClassName,\n      statusClassName,\n      textAreaClassName,\n      label,\n      required,\n      requiredIndicator,\n      displaySize,\n      labelClassName,\n      labelId,\n      testId,\n      errorIcon,\n      leftOverlay,\n      rightOverlay,\n      hideIconOnStatus,\n      statusPosition,\n      ...nativeProps\n    },\n    ref\n  ) => {\n    const reactId = React.useId();\n    const id = nativeProps.id ?? reactId;\n\n    const globals = useArmstrongConfig({\n      validationMode,\n      disableControlOnPending: disableOnPending,\n      inputStatusPosition: statusPosition,\n      inputDisplaySize: displaySize,\n      requiredIndicator,\n      scrollValidationErrorsIntoView,\n      validationErrorIcon: errorIcon,\n      hideInputErrorIconOnStatus: hideIconOnStatus,\n    });\n\n    const [boundValue, setBoundValue, bindConfig] = useBindingState(bind, {\n      value: value?.toString(),\n      validationErrorMessages,\n      validationMode: 'message',\n    });\n\n    const onBindValueChange = React.useCallback(\n      (currentValue?: string) => {\n        const formattedValue = bind?.bindConfig?.format?.toData?.(currentValue) || currentValue;\n        setBoundValue(formattedValue);\n      },\n      [setBoundValue, bind]\n    );\n\n    const onChangeEvent = React.useCallback(\n      (event: React.ChangeEvent<HTMLTextAreaElement>) => {\n        onChange?.(event);\n        const currentValue = event.currentTarget.value;\n        onBindValueChange(currentValue);\n        onValueChange?.(currentValue);\n      },\n      [onBindValueChange, onChange, onValueChange]\n    );\n\n    /** onChange used for throttled inputs */\n    const onValueChangeEvent = React.useCallback(\n      (currentValue?: string) => {\n        onBindValueChange(currentValue);\n        onValueChange?.(currentValue);\n      },\n      [onValueChange, onBindValueChange]\n    );\n\n    const textAreaProps: NativeTextAreaProps & { value?: string } = {\n      id,\n      className: concat('arm-text-area', textAreaClassName),\n      /** fallback to an empty string if bind is passed in but bound value is undefined to avoid React warning */\n      value: boundValue?.toString() ?? (bind && ''),\n      disabled,\n    };\n\n    return (\n      <InputWrapper\n        data-size={globals.inputDisplaySize}\n        className={concat(className, 'arm-text-area-wrapper')}\n        statusClassName={concat(statusClassName, 'arm-text-area-status')}\n        validationErrorsClassName={concat(validationErrorsClassName, 'arm-text-area-validation')}\n        validationErrorMessages={bindConfig.validationErrorMessages}\n        errorIcon={bindConfig.validationErrorIcon}\n        validationMode={bindConfig.validationMode}\n        pending={pending}\n        disabled={disabled}\n        statusPosition={globals.inputStatusPosition}\n        scrollValidationErrorsIntoView={globals.scrollValidationErrorsIntoView}\n        disableOnPending={globals.disableControlOnPending}\n        hideIconOnStatus={globals.hideInputErrorIconOnStatus}\n        label={label}\n        labelId={labelId ?? id}\n        labelClassName={concat(labelClassName, 'arm-text-area-label')}\n        required={required}\n        requiredIndicator={globals.requiredIndicator}\n        data-testid={testId}\n        leftOverlay={leftOverlay}\n        rightOverlay={rightOverlay}\n      >\n        {!!delay && (\n          <DebounceTextAreaBase\n            {...textAreaProps}\n            {...nativeProps}\n            milliseconds={delay}\n            onChange={onChange}\n            onValueChange={onValueChangeEvent}\n            ref={ref}\n          />\n        )}\n        {!delay && (\n          <textarea\n            className={'arm-text-area'}\n            {...textAreaProps}\n            {...nativeProps}\n            onChange={onChangeEvent}\n            ref={ref}\n            disabled={disabled || pending}\n          />\n        )}\n      </InputWrapper>\n    );\n  }\n  // type assertion to ensure generic works with RefForwarded component\n  // DO NOT CHANGE TYPE WITHOUT CHANGING THIS, FIND TYPE BY INSPECTING React.forwardRef\n) as (<TStringValue extends NullOrUndefined<string>>(\n  props: ArmstrongFCProps<ITextAreaProps<TStringValue>, HTMLTextAreaElement>\n) => ArmstrongFCReturn) &\n  ArmstrongFCExtensions<ITextAreaProps<string>>;\n\nTextArea.displayName = 'Text Area';\n"],"names":["DebounceTextAreaBase","React.forwardRef","milliseconds","value","onValueChange","onChange","nativeProps","ref","actualValue","setActualValue","useDebounce","onChangeEvent","React.useCallback","e","jsx","TextArea","bind","className","validationErrorMessages","validationMode","pending","disabled","disableOnPending","scrollValidationErrorsIntoView","delay","validationErrorsClassName","statusClassName","textAreaClassName","label","required","requiredIndicator","displaySize","labelClassName","labelId","testId","errorIcon","leftOverlay","rightOverlay","hideIconOnStatus","statusPosition","reactId","React.useId","id","globals","useArmstrongConfig","boundValue","setBoundValue","bindConfig","useBindingState","onBindValueChange","currentValue","formattedValue","_c","_b","_a","event","onValueChangeEvent","textAreaProps","concat","jsxs","InputWrapper"],"mappings":"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"}