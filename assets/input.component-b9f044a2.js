import{a as E,j as $}from"./jsx-runtime-63e4a166.js";import{r as i}from"./index-c4905b50.js";import{u as ee,I as ae}from"./inputWrapper.component-6f317040.js";import{u as te}from"./useDidUpdateEffect-2528cb48.js";import{c as p}from"./classNames-9011e307.js";import{a as ne}from"./label.component-8fdfed31.js";import{u as le}from"./config.context-03ebf2cb.js";const B=i.forwardRef(({milliseconds:l,value:s,onValueChange:c,onChange:u,...y},I)=>{const[g,m]=ee(l,s,c),V=i.useCallback(f=>{m(f.currentTarget.value),u==null||u(f)},[m,u]);return E("input",{ref:I,value:g,onChange:V,...y})});B.displayName="DebounceInput";const ie=i.forwardRef(({bind:l,onChange:s,value:c,className:u,leftOverlay:y,rightOverlay:I,validationErrorMessages:g,validationMode:m,errorIcon:V,pending:f,disabled:N,disableOnPending:_,statusPosition:k,hideIconOnStatus:z,onValueChange:r,scrollValidationErrorsIntoView:R,delay:q,validationErrorsClassName:x,statusClassName:A,inputClassName:j,label:P,required:F,requiredIndicator:U,displaySize:w,labelClassName:W,labelId:G,wrapperTestId:H,error:J,autoValidate:K,...t},S)=>{const L=i.useId(),C=t.id??L,[v,D,a]=ne(l,{value:c==null?void 0:c.toString(),validationErrorMessages:g,validationMode:m,validationErrorIcon:V,autoValidate:K}),n=le({validationMode:a.validationMode,disableControlOnPending:_,hideInputErrorIconOnStatus:z,inputDisplaySize:w,inputStatusPosition:k,requiredIndicator:U,validationErrorIcon:a.validationErrorIcon,scrollValidationErrorsIntoView:R,autoValidate:a.autoValidate}),d=i.useCallback(e=>{if(t.type!=="number")return e;if(e!=null&&e!=="")return parseFloat(e)},[t.type]),h=i.useCallback(e=>{var T,b,M;const o=d(e),Z=((M=(b=(T=l==null?void 0:l.bindConfig)==null?void 0:T.format)==null?void 0:b.toData)==null?void 0:M.call(b,o))||o;D(Z)},[D,l,d]),Q=i.useCallback(e=>{s==null||s(e);const o=e.currentTarget.value;h(o),r==null||r(d(o))},[h,s,r,d]),X=i.useCallback(e=>{h(e),r==null||r(d(e))},[r,h,d]);te(()=>{n.autoValidate&&a.isTouched&&a.validate()},[v]);const Y=i.useCallback(e=>{var o;return n.autoValidate&&!a.isTouched&&a.validate(),a.setTouched(!0),(o=t.onBlur)==null?void 0:o.call(t,e)},[a,n.autoValidate,t]),O={id:C,className:p("arm-input-base-input",j),value:(v==null?void 0:v.toString())??(l&&""),disabled:N,...t,onBlur:Y};return $(ae,{"data-size":n.inputDisplaySize,className:p(u,"arm-input-base"),statusClassName:p(A,"arm-input-base-status"),validationErrorsClassName:p(x,"arm-input-base-validation"),leftOverlay:y,rightOverlay:I,validationErrorMessages:a.validationErrorMessages,errorIcon:a.validationErrorIcon,validationMode:a.validationMode,pending:f,disabled:N,statusPosition:n.inputStatusPosition,scrollValidationErrorsIntoView:n.scrollValidationErrorsIntoView,disableOnPending:n.disableControlOnPending,hideIconOnStatus:n.hideInputErrorIconOnStatus,label:P,labelId:G??C,labelClassName:p(W,"arm-input-base-label"),required:F,error:J,requiredIndicator:n.requiredIndicator,"data-testid":H,displaySize:n.inputDisplaySize,children:[!!q&&E(B,{...t,...O,milliseconds:q,onChange:s,onValueChange:X,ref:S,"data-size":w}),!q&&E("input",{...t,...O,onChange:Q,ref:S,"data-size":w})]})});ie.displayName="Input";try{DebounceInput.displayName="DebounceInput",DebounceInput.__docgenInfo={description:"A component which wraps up a native input element with some binding logic and some repeated elements (icons and stuff) for components which only contain a single input element.",displayName:"DebounceInput",props:{type:{defaultValue:null,description:"The type of input, used to discriminate the bind/value type",name:"type",required:!1,type:{name:"enum",value:[{value:'"number"'},{value:'"search"'},{value:'"time"'},{value:'"text"'},{value:'"hidden"'},{value:'"color"'},{value:'"tel"'},{value:'"url"'},{value:'"email"'},{value:'"date"'},{value:'"datetime-local"'},{value:'"month"'},{value:'"password"'},{value:'"week"'}]}},inputClassName:{defaultValue:null,description:"A class name to apply to the input element",name:"inputClassName",required:!1,type:{name:"string"}},bind:{defaultValue:null,description:"prop for binding to an Armstrong form binder (see forms documentation)",name:"bind",required:!1,type:{name:"IBindingProps<TStringValue> | IBindingProps<TNumberValue>"}},onValueChange:{defaultValue:null,description:"Called when the value changes, takes into account any delay values and other effects.",name:"onValueChange",required:!1,type:{name:"((value?: TStringValue) => void) | ((value?: TNumberValue) => void) | undefined"}},delay:{defaultValue:null,description:"The delay config, used to set throttle and debounce values.",name:"delay",required:!1,type:{name:"number"}},value:{defaultValue:null,description:"The current value of the input",name:"value",required:!1,type:{name:"string | number | null"}},displaySize:{defaultValue:null,description:"which size variant to use",name:"displaySize",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},wrapperTestId:{defaultValue:null,description:"optional test ID to use for the input wrapper",name:"wrapperTestId",required:!1,type:{name:"string"}},autoValidate:{defaultValue:null,description:"should the input validate automatically against the provided schema? Default: `true`",name:"autoValidate",required:!1,type:{name:"boolean"}},validationErrorMessages:{defaultValue:null,description:"array of validation errors to render",name:"validationErrorMessages",required:!1,type:{name:"ValidationMessage[]"}},hideIconOnStatus:{defaultValue:null,description:"hide the icon on the given side if there is an active status - defaults to true",name:"hideIconOnStatus",required:!1,type:{name:"boolean"}},disableOnPending:{defaultValue:null,description:"when pending is true should also disable the input",name:"disableOnPending",required:!1,type:{name:"boolean"}},scrollValidationErrorsIntoView:{defaultValue:null,description:"will scroll the validation errors into view when the length of validationErrors changes",name:"scrollValidationErrorsIntoView",required:!1,type:{name:"boolean"}},leftOverlay:{defaultValue:null,description:"Content to show on the left of the input",name:"leftOverlay",required:!1,type:{name:"ReactNode"}},rightOverlay:{defaultValue:null,description:"Content to show on the right of the input",name:"rightOverlay",required:!1,type:{name:"ReactNode"}},statusClassName:{defaultValue:null,description:"Class name for the status component",name:"statusClassName",required:!1,type:{name:"string"}},validationErrorsClassName:{defaultValue:null,description:"Class name for the validation errors component",name:"validationErrorsClassName",required:!1,type:{name:"string"}},labelClassName:{defaultValue:null,description:"Class name for the label component",name:"labelClassName",required:!1,type:{name:"string"}},labelId:{defaultValue:null,description:"Optional ID for the label element",name:"labelId",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"Some optional label content",name:"label",required:!1,type:{name:"ReactNode"}},requiredIndicator:{defaultValue:null,description:'Symbol to use as the required indicator on the label, defaults to "*"',name:"requiredIndicator",required:!1,type:{name:"ReactNode"}},statusPosition:{defaultValue:null,description:"which side of the button to show the spinner on - defaults to 'right'",name:"statusPosition",required:!1,type:{name:"enum",value:[{value:'"left"'},{value:'"right"'}]}},error:{defaultValue:null,description:"show an error state icon on the component (will be true automatically if validationErrorMessages are passed in or errors are in the binder)",name:"error",required:!1,type:{name:"boolean"}},pending:{defaultValue:null,description:"show a spinner and disable",name:"pending",required:!1,type:{name:"boolean"}},validationMode:{defaultValue:null,description:"how to render the validation errors",name:"validationMode",required:!1,type:{name:"enum",value:[{value:'"icon"'},{value:'"message"'},{value:'"both"'}]}},errorIcon:{defaultValue:null,description:"the icon to use for validation errors",name:"errorIcon",required:!1,type:{name:"Element"}}}}}catch{}export{ie as I};
//# sourceMappingURL=input.component-b9f044a2.js.map
