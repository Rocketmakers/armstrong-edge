{"version":3,"file":"toast.stories-c68acc62.js","sources":["../../src/components/toast/toast.context.tsx","../../src/components/toast/toast.hooks.ts","../../src/components/provider/provider.component.tsx"],"sourcesContent":["import * as RadixToast from '@radix-ui/react-toast';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\n\nimport { useArmstrongConfig } from '../config';\nimport { Toast } from './toast.component';\n\nimport './toast.theme.css';\n\n/** Type denoting a toast message */\nexport interface IToast {\n  /** optional title for the toast popup (will be displayed above description & content) */\n  title?: string;\n  /** optional text content for the toast popup (will be displayed below title & above content) */\n  description?: string;\n  /** optional JSX content for the toast popup (will be displayed below title & description) */\n  content?: React.ReactNode;\n  /** how long to show the toast in ms for (will default to global setting or failing that 5000) */\n  duration?: number;\n  /** hide the close button entirely? */\n  hideClose?: boolean;\n  /** optional class name to add to the toast element */\n  className?: string;\n  /** optional test id to add to the toast element */\n  testId?: string;\n  /** optional additional props to spread onto the toast component */\n  additionalProps?: React.RefAttributes<HTMLLIElement>;\n}\n\n/** Type denoting the position of a toast message */\nexport type ToastPosition = 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left';\n\n/** Types of the global toast context */\ninterface IToastContext {\n  /** Adds a new toast message to the global stack */\n  addToast: (newToast: IToast) => void;\n}\n\n/** The default context to initialize with */\nconst initialContext: IToastContext = {\n  addToast: () => {\n    throw new Error(\n      \"Unable to dispatch toast, are you sure you've added either the <ArmstrongProvider> or <ToastProvider>?\"\n    );\n  },\n};\n\n/** The global toast context */\nexport const ToastContext = React.createContext<IToastContext>(initialContext);\n\n/** The props for the toast provider */\ninterface IToastProviderProps {\n  /** how long ot show toast messages for in ms, defaults to 5000 */\n  duration?: number;\n\n  /** where to position the toast, defaults to \"bottom-right\" */\n  position?: ToastPosition;\n\n  /** the icon to use for the dialog close button */\n  closeButtonIcon?: JSX.Element | false;\n}\n\nexport const ToastProvider: React.FC<React.PropsWithChildren<IToastProviderProps>> = ({\n  children,\n  duration,\n  position,\n  closeButtonIcon,\n}) => {\n  const [toasts, addToast] = React.useReducer<React.Reducer<IToast[], IToast>>(\n    (state, action) => [...state, action],\n    []\n  );\n  const globals = useArmstrongConfig({\n    toastDuration: duration,\n    toastPosition: position,\n    toastCloseButtonIcon: closeButtonIcon,\n  });\n\n  const swipeDirection =\n    globals.toastPosition === 'bottom-left' || globals.toastPosition === 'top-left' ? 'left' : 'right';\n\n  return (\n    <ToastContext.Provider value={{ addToast }}>\n      <RadixToast.Provider swipeDirection={swipeDirection} duration={globals.toastDuration}>\n        {children}\n        {toasts.map((toast, i) => (\n          <Toast\n            key={`${toast.title}-${i}`}\n            duration={globals.toastDuration}\n            position={globals.toastPosition}\n            closeButtonIcon={globals.toastCloseButtonIcon}\n            {...toast}\n          />\n        ))}\n        {globals.globalPortalTo && ReactDOM.createPortal(\n          <RadixToast.Viewport className=\"arm-toast-viewport\" data-position={globals.toastPosition} />,\n          globals.globalPortalTo\n        )}\n      </RadixToast.Provider>\n    </ToastContext.Provider>\n  );\n};\n\nToastProvider.displayName = 'ToastProvider';\n","import * as React from 'react';\n\nimport { ToastContext } from './toast.context';\n\n/**\n * Simple hook allowing global toast messages to be dispatched.\n * WARNING: This hook must be used within either the unified <ArmstrongProvider> or standalone <ToastProvider> to work.\n * @returns A dispatch method for sending a new global toast message\n */\nexport const useToast = () => {\n  const { addToast } = React.useContext(ToastContext);\n  return addToast;\n};\n","import * as React from 'react';\n\nimport { ArmstrongConfigProvider, IArmstrongConfig } from '../config';\nimport { ToastProvider } from '../toast';\n\n/** Props type for the unified armstrong provider */\nexport interface IArmstrongProviderProps extends React.PropsWithChildren {\n  /** A dictionary of optional global config, overrides the system defaults */\n  config?: IArmstrongConfig;\n}\n\nexport const ArmstrongProvider: React.FC<IArmstrongProviderProps> = ({ children, config = {} }) => {\n  return (\n    <ArmstrongConfigProvider {...config}>\n      <ToastProvider>{children}</ToastProvider>\n    </ArmstrongConfigProvider>\n  );\n};\n"],"names":["initialContext","ToastContext","React.createContext","ToastProvider","children","duration","position","closeButtonIcon","toasts","addToast","React.useReducer","state","action","globals","useArmstrongConfig","swipeDirection","jsx","jsxs","RadixToast.Provider","toast","i","Toast","ReactDOM.createPortal","RadixToast.Viewport","useToast","React.useContext","ArmstrongProvider","config","ArmstrongConfigProvider"],"mappings":"u2BAuCA,MAAAA,GAAA,CAAsC,SAAA,IAAA,CAElC,MAAA,IAAA,MAAU,wGACR,CACF,CAEJ,EAGOC,EAAAC,EAAAA,cAAAF,EAAA,EAcAG,EAAA,CAAA,CAA+E,SAAAC,EACpF,SAAAC,EACA,SAAAC,EACA,gBAAAC,CAEF,IAAA,CACE,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,WAAiC,CAAAC,EAAAC,IAAA,CAAA,GAAAD,EAAAC,CAAA,EACK,CAAA,CACnC,EAEHC,EAAAC,GAAA,CAAmC,cAAAT,EAClB,cAAAC,EACA,qBAAAC,CACO,CAAA,EAGxBQ,EAAAF,EAAA,gBAAA,eAAAA,EAAA,gBAAA,WAAA,OAAA,QAGA,OAAAG,EAAAf,EAAA,SAAA,CAAA,MAAA,CAAA,SAAAQ,GAAA,SAAAQ,EAAAC,EAAA,CAAA,eAAAH,EAAA,SAAAF,EAAA,cAAA,SAAA,CAGOT,EAAAI,EAAA,IAAA,CAAAW,EAAAC,IAAAJ,EAECK,EAAC,CAAA,SAAAR,EAAA,cAEmB,SAAAA,EAAA,cACA,gBAAAA,EAAA,qBACO,GAAAM,CACrB,EAAA,GAAAA,EAAA,KAAA,IAAAC,CAAA,EAJoB,CAAA,EAM3BP,EAAA,gBAAAS,GAAA,aACmCN,EAAAO,EAAA,CAAA,UAAA,qBAAA,gBAAAV,EAAA,cAAA,EACwDA,EAAA,cAClF,CACV,CAAA,CAAA,CAAA,CAAA,CAIR,EAEAV,EAAA,YAAA,sJC9FO,MAAMqB,GAAW,IAAM,CAC5B,KAAM,CAAE,SAAAf,CAAA,EAAagB,aAAiBxB,CAAY,EAC3C,OAAAQ,CACT,ECDOiB,EAAA,CAAA,CAAA,SAAAtB,EAAA,OAAAuB,EAAA,CAAA,CAAA,IACLX,EAAAY,GAAA,CAAA,GAAAD,EAAA,SAAAX,EAAAb,EAAA,CAAA,SAAAC,CAAA,CAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}