{"version":3,"file":"options-d4d63b36.js","sources":["../../src/types/options.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { ArmstrongId, DataAttributes } from './core';\n\n/** an option in an array of options, intended for use in a component like a Select or RadioList */\nexport interface IArmstrongOption<Id extends ArmstrongId, HtmlProps = unknown> {\n  /** the value to be bound */\n  id: Id;\n\n  /** JSX to render inside the option - can take a function which receives the active state of the option and returns the JSX to render */\n  content?: React.ReactNode | ((active: boolean) => React.ReactNode);\n\n  /** props to spread onto the root element of the option */\n  htmlProps?: HtmlProps & DataAttributes;\n\n  /** is the option available - if not, will be greyed out and unable to select */\n  disabled?: boolean;\n\n  /** will be true if the option was created through the input, relevant to selects and tagging inputs where allowCreate=true */\n  wasCreated?: boolean;\n}\n\n/**\n * Gets option content from option definition\n * @param option The definition of the option\n * @returns The option content\n */\nexport const getContentFromOption = <Id extends ArmstrongId>(\n  option: IArmstrongOption<Id>,\n  active = !!option.disabled\n) => {\n  return typeof option.content === 'function' ? option.content(active) : option.content;\n};\n"],"names":["getContentFromOption","option","active"],"mappings":"AA2BO,MAAMA,EAAuB,CAClCC,EACAC,EAAS,CAAC,CAACD,EAAO,WAEX,OAAOA,EAAO,SAAY,WAAaA,EAAO,QAAQC,CAAM,EAAID,EAAO"}