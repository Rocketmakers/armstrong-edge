{"version":3,"file":"inputWrapper.component-ef23b14e.js","sources":["../../src/hooks/useDebounce.ts","../../src/components/inputWrapper/inputWrapper.component.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { useDidUpdateEffect } from './useDidUpdateEffect';\n\n/**\n * Like a state hook, but also exports a \"throttled\" value (set after x amount of inactivity through the setter method)\n * @param throttleTime (optional) How long a period of inactivity before setting the throttled value\n * @param hardValue (optional) An initial value and a live value (will set both actual and throttled values if it changes).\n * @param onChange (optional) A callback function which will receive the throttled value when it changes.\n * @returns An array for deconstruction. [the actual value, the setter for the actual value, the throttled value, a reset method to return to the hard value]\n */\nexport function useDebounce<T>(\n  throttleTime = 500,\n  hardValue?: T,\n  onChange?: (newValue: T | undefined) => void\n): [T | undefined, (newValue: T) => void, T | undefined, () => void] {\n  const [actualValue, setActualValue] = React.useState(hardValue);\n  const [throttledValue, setThrottledValue] = React.useState(hardValue);\n\n  const setValue = React.useCallback(() => {\n    setThrottledValue(actualValue);\n    onChange?.(actualValue);\n  }, [actualValue, setThrottledValue, onChange]);\n\n  const resetToHardValue = React.useCallback(() => {\n    setActualValue(hardValue);\n    setThrottledValue(hardValue);\n  }, [hardValue, setActualValue, setThrottledValue]);\n\n  React.useEffect(() => {\n    resetToHardValue();\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- nope, legit effect trigger\n  }, [hardValue]);\n\n  React.useEffect(() => {\n    const throttleTimer = setTimeout(setValue, throttleTime);\n    return () => clearTimeout(throttleTimer);\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- nope, legit effect trigger\n  }, [actualValue]);\n\n  return [actualValue, setActualValue, throttledValue, resetToHardValue];\n}\n\n/**\n * An effect that runs when the dependency changes have been inactive for x milliseconds\n * @param fn A callback function to run when the dependencies changes\n * @param ms How long a period of inactivity before running the effect\n * @param deps List of dependencies to trigger rerunning the effect\n */\nexport function useDebounceEffect<TFunc extends (...params: unknown[]) => unknown>(\n  fn: TFunc,\n  ms: number,\n  deps: React.DependencyList\n) {\n  const throttleRef = React.useRef<NodeJS.Timeout>();\n\n  useDidUpdateEffect(() => {\n    if (throttleRef.current) {\n      clearTimeout(throttleRef.current);\n    }\n    throttleRef.current = setTimeout(() => {\n      fn();\n    }, ms);\n  }, deps);\n}\n","import * as React from 'react';\n\nimport { ValidationMessage } from '../../form';\nimport { DisplaySize } from '../../types';\nimport { concat } from '../../utils/classNames';\nimport { useArmstrongConfig } from '../config';\nimport { Label } from '../label';\nimport { IStatusWrapperProps, StatusWrapper } from '../statusWrapper/statusWrapper.component';\nimport { ValidationErrors } from '../validationErrors';\n\nimport './inputWrapper.theme.css';\n\nexport interface IInputWrapperProps extends IStatusWrapperProps {\n  /** array of validation errors to render */\n  validationErrorMessages?: ValidationMessage[];\n\n  /** disable use */\n  disabled?: boolean;\n\n  /** hide the icon on the given side if there is an active status - defaults to true */\n  hideIconOnStatus?: boolean;\n\n  /** when pending is true should also disable the input */\n  disableOnPending?: boolean;\n\n  /** will scroll the validation errors into view when the length of validationErrors changes */\n  scrollValidationErrorsIntoView?: boolean;\n\n  /** Content to show on the left of the input */\n  leftOverlay?: React.ReactNode;\n\n  /** Content to show on the right of the input */\n  rightOverlay?: React.ReactNode;\n\n  /** Class name for the status component */\n  statusClassName?: string;\n\n  /** Class name for the validation errors component */\n  validationErrorsClassName?: string;\n\n  /** Class name for the label component */\n  labelClassName?: string;\n\n  /** Optional ID for the label element */\n  labelId?: string;\n\n  /** Some optional label content */\n  label?: React.ReactNode;\n\n  /** Should the label show a required indicator? */\n  required?: boolean;\n\n  /** Symbol to use as the required indicator on the label, defaults to \"*\" */\n  requiredIndicator?: React.ReactNode;\n\n  /** which size variant to use */\n  displaySize?: DisplaySize;\n}\n\n/** Wrapper for individual input elements, allowing them to be styled consistently] */\nexport const InputWrapper = React.forwardRef<HTMLDivElement, React.PropsWithChildren<IInputWrapperProps>>(\n  (\n    {\n      className,\n      children,\n      leftOverlay,\n      rightOverlay,\n      validationMode,\n      validationErrorMessages,\n      errorIcon,\n      disabled,\n      pending,\n      error,\n      statusPosition,\n      hideIconOnStatus,\n      disableOnPending,\n      scrollValidationErrorsIntoView,\n      statusClassName,\n      validationErrorsClassName,\n      label,\n      required,\n      requiredIndicator,\n      labelClassName,\n      labelId,\n      displaySize,\n      ...nativeProps\n    },\n    ref\n  ) => {\n    const globals = useArmstrongConfig({\n      validationMode,\n      hideInputErrorIconOnStatus: hideIconOnStatus,\n      disableControlOnPending: disableOnPending,\n      requiredIndicator,\n      scrollValidationErrorsIntoView,\n      inputStatusPosition: statusPosition,\n      validationErrorIcon: errorIcon,\n      inputDisplaySize: displaySize,\n    });\n\n    const shouldShowValidationErrorsList = globals.validationMode === 'both' || globals.validationMode === 'message';\n    const shouldShowErrorIcon =\n      (!!validationErrorMessages?.length && (globals.validationMode === 'both' || globals.validationMode === 'icon')) ||\n      error;\n\n    const showLeftOverlay =\n      leftOverlay &&\n      (globals.inputStatusPosition !== 'left' ||\n        !globals.hideInputErrorIconOnStatus ||\n        (!pending && !shouldShowErrorIcon));\n\n    const showRightOverlay =\n      rightOverlay &&\n      (globals.inputStatusPosition !== 'right' ||\n        !globals.hideInputErrorIconOnStatus ||\n        (!pending && !shouldShowErrorIcon));\n\n    return (\n      <>\n        <div\n          ref={ref}\n          className={concat('arm-input', 'arm-input-wrapper', className)}\n          data-disabled={disabled || (pending && globals.disableControlOnPending) ? true : undefined}\n          data-error={error || !!validationErrorMessages?.length ? true : undefined}\n          data-left-overlay={\n            showLeftOverlay || (globals.inputStatusPosition === 'left' && (shouldShowErrorIcon || pending))\n              ? true\n              : undefined\n          }\n          data-right-overlay={\n            showRightOverlay || (globals.inputStatusPosition === 'right' && (shouldShowErrorIcon || pending))\n              ? true\n              : undefined\n          }\n          {...nativeProps}\n        >\n          {label && (\n            <Label\n              className={concat('arm-input-base-label', labelClassName)}\n              required={required}\n              requiredIndicator={globals.requiredIndicator}\n              htmlFor={labelId}\n              displaySize={globals.inputDisplaySize}\n            >\n              {label}\n            </Label>\n          )}\n          <div className=\"arm-input-inner\">\n            <StatusWrapper\n              error={error || !!validationErrorMessages?.length}\n              pending={pending}\n              statusPosition={globals.inputStatusPosition}\n              errorIcon={globals.validationErrorIcon}\n              validationMode={globals.validationMode}\n              className={statusClassName}\n            >\n              <>\n                {showLeftOverlay && <div className=\"arm-input-overlay arm-input-overlay-left\">{leftOverlay}</div>}\n                {children}\n                {showRightOverlay && <div className=\"arm-input-overlay arm-input-overlay-right\">{rightOverlay}</div>}\n              </>\n            </StatusWrapper>\n          </div>\n          {!!validationErrorMessages?.length && shouldShowValidationErrorsList && (\n            <ValidationErrors\n              className={validationErrorsClassName}\n              validationMode={globals.validationMode}\n              validationErrors={validationErrorMessages}\n              scrollIntoView={globals.scrollValidationErrorsIntoView}\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n);\n\nInputWrapper.displayName = 'InputWrapper';\n"],"names":["useDebounce","throttleTime","hardValue","onChange","actualValue","setActualValue","React.useState","throttledValue","setThrottledValue","setValue","React.useCallback","resetToHardValue","React.useEffect","throttleTimer","InputWrapper","React.forwardRef","className","children","leftOverlay","rightOverlay","validationMode","validationErrorMessages","errorIcon","disabled","pending","error","statusPosition","hideIconOnStatus","disableOnPending","scrollValidationErrorsIntoView","statusClassName","validationErrorsClassName","label","required","requiredIndicator","labelClassName","labelId","displaySize","nativeProps","ref","globals","useArmstrongConfig","shouldShowValidationErrorsList","shouldShowErrorIcon","showLeftOverlay","showRightOverlay","jsx","Fragment","jsxs","concat","Label","StatusWrapper","ValidationErrors"],"mappings":"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"}