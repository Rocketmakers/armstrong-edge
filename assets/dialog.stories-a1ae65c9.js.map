{"version":3,"file":"dialog.stories-a1ae65c9.js","sources":["../../src/components/dialog/dialog.stories.mdx"],"sourcesContent":["import { ArgsTable, Canvas, Meta, Story } from '@storybook/addon-docs';\nimport { Dialog } from './dialog.component';\n\n<Meta title=\"Modals/Dialog\" component={Dialog} />\n\n# Dialogs\n\nDialog component. Used to display a full-screen modal dialog to the user.\n\n- Can be state controlled with `open` and `onOpenChange` props.\n- Can be async by assigning a ref and calling the utility functions (a `useDialog` helper hook is available for this.)\n- Supports dynamic data in async mode, so that a form can be built as a reusable async dialog.\n\n<Canvas withSource=\"closed\">\n  <Story id=\"modals-dialog--default\" />\n</Canvas>\n\n## Contents\n\n- [Simple state controlled dialog](#simple-state)\n- [Async dialog](#async)\n- [Reusable dialog component](#reusable)\n- [Reusable form dialog](#reusable-form)\n- [Full props table](#props)\n\n## <a name=\"simple-state\">Simple state controlled dialog</a>\n\nThe simplest way to use an Armstrong dialog is with a React state bool like so:\n\n```tsx\nexport const SimpleStateDialog: React.FC = () => {\n  const [open, setOpen] = React.useState(false);\n\n  return (\n    <div>\n      <Dialog open={open} onOpenChange={setOpen} title=\"Simple State Dialog\">\n        <div>Here is some content</div>\n      </Dialog>\n      <Button onClick={() => setOpen(true)}>Open simple state dialog</Button>\n    </div>\n  );\n};\n```\n\nSee it in action here:\n\n<Canvas withSource=\"closed\">\n  <Story id=\"modals-dialog--simple-state-dialog\" />\n</Canvas>\n\n## <a name=\"async\">Async dialog</a>\n\nArmstrong dialogs can also be controlled via a promise based function, allowing developers to show a dialog and capture a response with a single line of async/await.\n\nA common use case for this is a basic confirmation dialog, like so:\n\n```tsx\nexport const ConfirmationDialog: React.FC = () => {\n  const [dialogRef, { open, ok, cancel }] = useDialog();\n\n  const openDialog = React.useCallback(async () => {\n    const { action } = await open();\n    if (action === 'ok') {\n      alert('Dialog confirmed!');\n    }\n  }, [open]);\n\n  return (\n    <div>\n      <Dialog ref={dialogRef} title=\"Are you sure?\">\n        <div>Actions have consequences, would you like to continue anyway?</div>\n        <Button onClick={ok}>OK</Button>\n        <Button onClick={cancel}>Cancel</Button>\n      </Dialog>\n      <Button onClick={openDialog}>Open confirmation dialog</Button>\n    </div>\n  );\n};\n```\n\nSee it in action here (this example has some simple styling added for demo purposes:)\n\n<Canvas withSource=\"closed\">\n  <Story id=\"modals-dialog--async-dialog\" />\n</Canvas>\n\n## <a name=\"reusable\">Reusable dialog component</a>\n\nIf you're building a dialog component to be used throughout your app, the `useDialog` hook has you covered. Simply write your component with a `forwardRef` and pass the ref into the `useDialog` hook.\n\n**NOTE:** Reusable dialogs can still use the utility function returned from the `useDialog` hook just like the earlier example.\n\n```tsx\nexport const ReusableDialog = React.forwardRef<DialogElement>((props, ref) => {\n  const [dialogRef, { cancel }] = useDialog(ref);\n\n  return (\n    <Dialog ref={dialogRef} title=\"Reusable dialog\">\n      <div>This custom dialog can be used throughout the app just like an Armstrong dialog!</div>\n      <Button onClick={cancel}>Cancel</Button>\n    </Dialog>\n  );\n});\n\nexport const ConsumingComponent: React.FC = () => {\n  const [customDialogRef, { open }] = useDialog();\n\n  return (\n    <div>\n      <ReusableDialog ref={customDialogRef} />\n      <Button onClick={open}>Open reusable dialog</Button>\n    </div>\n  );\n};\n```\n\nSee it in action here:\n\n<Canvas withSource=\"closed\">\n  <Story id=\"modals-dialog--reusable-dialog\" />\n</Canvas>\n\n## <a name=\"reusable-form\">Reusable form dialog</a>\n\nIf you're wondering whether a reusable dialog can contain a form, the answer is yes! Any internal state or form data can be passed into the `data` prop of the Armstrong dialog. This data will then be available to consuming components through the promise result!\n\nA good example use case here is a login dialog, observe:\n\n```tsx\ninterface ILoginData {\n  username: string;\n  password: string;\n}\n\nexport const LoginDialog = React.forwardRef<DialogElement<ILoginData>>((props, ref) => {\n  const [dialogRef, { ok }] = useDialog(ref);\n  const { formProp, formState } = useForm<ILoginData>();\n\n  const onSubmit = React.useCallback(\n    (e: React.FormEvent<HTMLFormElement>) => {\n      e.preventDefault();\n      ok();\n    },\n    [ok]\n  );\n\n  return (\n    <Dialog ref={dialogRef} title=\"Login\" data={formState}>\n      <form onSubmit={onSubmit}>\n        <Input type=\"text\" bind={formProp('username').bind()} placeholder=\"Username\" />\n        <Input type=\"password\" bind={formProp('password').bind()} placeholder=\"Password\" />\n        <Button type=\"submit\" disabled={!formState?.username || !formState?.password}>\n          Login\n        </Button>\n      </form>\n    </Dialog>\n  );\n});\n\nexport const ConsumingComponent: StoryObj<typeof Dialog> = {\n  render: () => {\n    const [customDialogRef, { open }] = useDialog<ILoginData>();\n\n    const openDialog = React.useCallback(async () => {\n      const { action, data } = await open();\n      if (action === 'ok') {\n        alert(`Logging in as \"${data?.username}\" with password: ${data?.password}`);\n      }\n    }, [open]);\n\n    return (\n      <div>\n        <LoginDialog ref={customDialogRef} />\n        <Button onClick={openDialog}>Open login dialog</Button>\n      </div>\n    );\n  },\n};\n```\n\nSee it in action here:\n\nP.S. Notice how the first form element within a dialog is automatically focussed, and the keyboard focus is automatically trapped within the dialog! ðŸ‘Œ\n\n<Canvas withSource=\"closed\">\n  <Story id=\"modals-dialog--reusable-form-dialog\" />\n</Canvas>\n\n## <a name=\"props\">Full props table</a>\n\n<ArgsTable of={Dialog} />\n"],"names":["_createMdxContent","props","_components","_provideComponents","_jsxs","_Fragment","_jsx","Meta","Dialog","Canvas","Story","ArgsTable","MDXContent","MDXLayout","__page","componentMeta","__namedExportsOrder"],"mappings":"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"}