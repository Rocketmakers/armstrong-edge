{"version":3,"file":"input.component-25e5ee85.js","sources":["../../src/components/input/input.component.tsx"],"sourcesContent":["import * as React from 'react';\nimport { HTMLInputTypeAttribute } from 'react';\n\nimport { IBindingProps, useBindingState } from '../../form';\nimport { useDebounce } from '../../hooks/useDebounce';\nimport { ArmstrongFCExtensions, ArmstrongFCProps, ArmstrongFCReturn, DisplaySize, NullOrUndefined } from '../../types';\nimport { concat } from '../../utils/classNames';\nimport { useArmstrongConfig } from '../config';\nimport { IInputWrapperProps, InputWrapper } from '../inputWrapper/inputWrapper.component';\n\nimport './input.theme.css';\n\ntype NativeInputProps = Omit<\n  React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>,\n  'value' | 'ref'\n>;\n\ninterface IDelayedInputBaseProps<TValue> extends NativeInputProps {\n  /** The time in ms to delay the debounce or throttle effect. */\n  milliseconds: number;\n\n  /** Called when the value changes, takes into account any delay values and other effects. */\n  onValueChange: (value: TValue | undefined) => void;\n\n  /** The current value of the input */\n  value?: TValue;\n}\n\nconst DebounceInputBase = React.forwardRef<HTMLInputElement, IDelayedInputBaseProps<string>>(\n  ({ milliseconds, value, onValueChange, onChange, ...nativeProps }, ref) => {\n    const [actualValue, setActualValue] = useDebounce(milliseconds, value, onValueChange);\n\n    const onChangeEvent = React.useCallback(\n      (e: React.ChangeEvent<HTMLInputElement>) => {\n        setActualValue(e.currentTarget.value);\n        onChange?.(e);\n      },\n      [setActualValue, onChange]\n    );\n\n    return <input ref={ref} value={actualValue} onChange={onChangeEvent} {...nativeProps} />;\n  }\n);\n\nDebounceInputBase.displayName = 'DebounceInput';\n\ninterface IInputProps<TValue extends NullOrUndefined<string> | NullOrUndefined<number>>\n  extends Omit<NativeInputProps, 'type'>,\n    IInputWrapperProps {\n  /** A class name to apply to the input element */\n  inputClassName?: string;\n\n  /**  prop for binding to an Armstrong form binder (see forms documentation) */\n  bind?: IBindingProps<TValue>;\n\n  /** Called when the value changes, takes into account any delay values and other effects. */\n  onValueChange?: (value?: TValue) => void;\n\n  /** The delay config, used to set throttle and debounce values. */\n  delay?: number;\n\n  /** The current value of the input */\n  value?: TValue;\n\n  /** which size variant to use */\n  displaySize?: DisplaySize;\n\n  /** optional test ID to use for the input wrapper */\n  wrapperTestId?: string;\n}\n\ntype SupportedStringInputTypes =\n  | 'color'\n  | 'date'\n  | 'datetime-local'\n  | 'email'\n  | 'month'\n  | 'password'\n  | 'search'\n  | 'tel'\n  | 'text'\n  | 'time'\n  | 'url'\n  | 'week';\n\nexport interface ITextInputProps<TValue extends NullOrUndefined<string>> extends IInputProps<TValue> {\n  /** The type of input, used to discriminate the bind/value type */\n  type?: Extract<HTMLInputTypeAttribute, SupportedStringInputTypes>;\n}\n\nexport interface INumberInputProps<TValue extends NullOrUndefined<number>> extends IInputProps<TValue> {\n  /** The type of input, used to discriminate the bind/value type */\n  type: 'number';\n}\n\n/** A component which wraps up a native input element with some binding logic and some repeated elements (icons and stuff) for components which only contain a single input element. */\nexport const Input = React.forwardRef<\n  HTMLInputElement,\n  IInputProps<string | number> & { type?: HTMLInputTypeAttribute }\n>(\n  (\n    {\n      bind,\n      onChange,\n      value,\n      className,\n      leftOverlay,\n      rightOverlay,\n      validationErrorMessages,\n      validationMode,\n      errorIcon: validationErrorIcon,\n      pending,\n      disabled,\n      disableOnPending,\n      statusPosition,\n      hideIconOnStatus,\n      onValueChange,\n      scrollValidationErrorsIntoView,\n      delay,\n      validationErrorsClassName,\n      statusClassName,\n      inputClassName,\n      label,\n      required,\n      requiredIndicator,\n      displaySize,\n      labelClassName,\n      labelId,\n      wrapperTestId,\n      error,\n      ...nativeProps\n    },\n    ref\n  ) => {\n    const reactId = React.useId();\n    const id = nativeProps.id ?? reactId;\n\n    const globals = useArmstrongConfig({\n      validationMode,\n      disableControlOnPending: disableOnPending,\n      hideInputErrorIconOnStatus: hideIconOnStatus,\n      inputDisplaySize: displaySize,\n      inputStatusPosition: statusPosition,\n      requiredIndicator,\n      validationErrorIcon,\n      scrollValidationErrorsIntoView,\n    });\n\n    const [boundValue, setBoundValue, bindConfig] = useBindingState(bind, {\n      value: value?.toString(),\n      validationErrorMessages,\n      validationMode: globals.validationMode,\n      validationErrorIcon: globals.validationErrorIcon,\n    });\n\n    const parseValue = React.useCallback(\n      (unparsedValue?: string) => {\n        if (nativeProps.type !== 'number') {\n          return unparsedValue;\n        }\n        if (unparsedValue !== null && unparsedValue !== undefined && unparsedValue !== '') {\n          return parseFloat(unparsedValue);\n        }\n        return undefined;\n      },\n      [nativeProps.type]\n    );\n\n    const onBindValueChange = React.useCallback(\n      (currentValue?: string) => {\n        const parsedValue = parseValue(currentValue);\n        const formattedValue = bind?.bindConfig?.format?.toData?.(parsedValue) || parsedValue;\n        setBoundValue(formattedValue);\n      },\n      [setBoundValue, bind, parseValue]\n    );\n\n    const onChangeEvent = React.useCallback(\n      (event: React.ChangeEvent<HTMLInputElement>) => {\n        onChange?.(event);\n        const currentValue = event.currentTarget.value;\n        onBindValueChange(currentValue);\n        onValueChange?.(parseValue(currentValue));\n      },\n      [onBindValueChange, onChange, onValueChange, parseValue]\n    );\n\n    /** onChange used for throttled inputs */\n    const onValueChangeEvent = React.useCallback(\n      (currentValue?: string) => {\n        onBindValueChange(currentValue);\n        onValueChange?.(parseValue(currentValue));\n      },\n      [onValueChange, onBindValueChange, parseValue]\n    );\n\n    const inputProps: NativeInputProps & { value?: string; 'data-testid'?: string } = {\n      id,\n      className: concat('arm-input-base-input', inputClassName),\n      /** fallback to an empty string if bind is passed in but bound value is undefined to avoid React warning */\n      value: boundValue?.toString() ?? (bind && ''),\n      disabled,\n      ...nativeProps,\n    };\n\n    return (\n      <InputWrapper\n        data-size={globals.inputDisplaySize}\n        className={concat(className, 'arm-input-base')}\n        statusClassName={concat(statusClassName, 'arm-input-base-status')}\n        validationErrorsClassName={concat(validationErrorsClassName, 'arm-input-base-validation')}\n        leftOverlay={leftOverlay}\n        rightOverlay={rightOverlay}\n        validationErrorMessages={bindConfig.validationErrorMessages}\n        errorIcon={bindConfig.validationErrorIcon}\n        validationMode={bindConfig.validationMode}\n        pending={pending}\n        disabled={disabled}\n        statusPosition={globals.inputStatusPosition}\n        scrollValidationErrorsIntoView={globals.scrollValidationErrorsIntoView}\n        disableOnPending={globals.disableControlOnPending}\n        hideIconOnStatus={globals.hideInputErrorIconOnStatus}\n        label={label}\n        labelId={labelId ?? id}\n        labelClassName={concat(labelClassName, 'arm-input-base-label')}\n        required={required}\n        error={error}\n        requiredIndicator={globals.requiredIndicator}\n        data-testid={wrapperTestId}\n        displaySize={globals.inputDisplaySize}\n      >\n        {!!delay && (\n          <DebounceInputBase\n            {...nativeProps}\n            {...inputProps}\n            milliseconds={delay}\n            onChange={onChange}\n            onValueChange={onValueChangeEvent}\n            ref={ref}\n            data-size={displaySize}\n          />\n        )}\n        {!delay && (\n          <input {...nativeProps} {...inputProps} onChange={onChangeEvent} ref={ref} data-size={displaySize} />\n        )}\n      </InputWrapper>\n    );\n  }\n  // type assertion to ensure generic works with RefForwarded component\n  // DO NOT CHANGE TYPE WITHOUT CHANGING THIS, FIND TYPE BY INSPECTING React.forwardRef\n) as (<TStringValue extends NullOrUndefined<string>, TNumberValue extends NullOrUndefined<number>>(\n  props: ArmstrongFCProps<ITextInputProps<TStringValue> | INumberInputProps<TNumberValue>, HTMLInputElement>\n) => ArmstrongFCReturn) &\n  ArmstrongFCExtensions<ITextInputProps<string> | INumberInputProps<number>>;\n\nInput.displayName = 'Input';\n"],"names":["DebounceInputBase","React.forwardRef","milliseconds","value","onValueChange","onChange","nativeProps","ref","actualValue","setActualValue","useDebounce","onChangeEvent","React.useCallback","e","jsx","Input","bind","className","leftOverlay","rightOverlay","validationErrorMessages","validationMode","validationErrorIcon","pending","disabled","disableOnPending","statusPosition","hideIconOnStatus","scrollValidationErrorsIntoView","delay","validationErrorsClassName","statusClassName","inputClassName","label","required","requiredIndicator","displaySize","labelClassName","labelId","wrapperTestId","error","reactId","React.useId","id","globals","useArmstrongConfig","boundValue","setBoundValue","bindConfig","useBindingState","parseValue","unparsedValue","onBindValueChange","currentValue","parsedValue","formattedValue","_c","_b","_a","event","onValueChangeEvent","inputProps","concat","jsxs","InputWrapper"],"mappings":"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"}