{"version":3,"file":"dialog.stories-98bdd9cb.js","sources":["../../src/components/dialog/dialog.hooks.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { DialogElement } from './dialog.component';\n\n/** Error to throw if a dialog function is called but the ref is falsy */\nconst emptyRefError =\n  \"Dialog function called on an invalid dialog, are you sure you've added the ref to the Armstrong <Dialog> component?\";\n\n/**\n * Returns a hydrated DialogElement so that the functions can always be defined regardless of the ref status.\n * - The functions inside the returned DialogElement object simply attempt to call their corresponding functions on the passed in \"real\" dialog element and throw if they can't.\n * @param elementRef A ref to the \"real\" dialog element.\n * @returns A hydrated DialogElement which calls the functions on the real thing\n */\nfunction getEmptyRefElement<TData>(elementRef: React.RefObject<DialogElement<TData>>): DialogElement<TData> {\n  return {\n    open: () => {\n      if (!elementRef.current) {\n        throw new Error(emptyRefError);\n      }\n      return elementRef.current.open();\n    },\n    cancel: () => {\n      if (!elementRef.current) {\n        throw new Error(emptyRefError);\n      }\n      return elementRef.current.cancel();\n    },\n    close: () => {\n      if (!elementRef.current) {\n        throw new Error(emptyRefError);\n      }\n      return elementRef.current.close();\n    },\n    ok: () => {\n      if (!elementRef.current) {\n        throw new Error(emptyRefError);\n      }\n      return elementRef.current.ok();\n    },\n  };\n}\n\n/** Hook return tuple */\nexport type UseDialogReturn<TData> = [React.RefObject<DialogElement<TData>>, DialogElement<TData>];\n\n/**\n * A hook providing quick access to the utilities of an Armstrong Dialog component\n * @param forwardRef - A forwarded ref used to pass the dialog controls out of the component using this hook with `forwardRef`\n * @typedef {number} UseDialogReturn1 - A ref to assign to your Armstrong <Dialog> element\n * @typedef {number} UseDialogReturn2 - A dictionary of functions associated with the referenced Armstrong <Dialog> element\n * @typedef {[UseDialogReturn1, UseDialogReturn2]} UseDialogReturn\n * @returns {UseDialogReturn}\n */\nexport const useDialog = <TData>(\n  forwardRef?: React.ForwardedRef<DialogElement<TData>>\n): [React.RefObject<DialogElement<TData>>, DialogElement<TData>] => {\n  const dialogRef = React.useRef<DialogElement<TData>>(null);\n  React.useImperativeHandle(forwardRef, () => dialogRef.current as DialogElement<TData>);\n  return [dialogRef, getEmptyRefElement<TData>(dialogRef)];\n};\n"],"names":["emptyRefError","getEmptyRefElement","elementRef","useDialog","forwardRef","dialogRef","React.useRef","React.useImperativeHandle"],"mappings":"sjCAKA,MAAMA,EACJ,sHAQF,SAASC,GAA0BC,EAAyE,CACnG,MAAA,CACL,KAAM,IAAM,CACN,GAAA,CAACA,EAAW,QACR,MAAA,IAAI,MAAMF,CAAa,EAExB,OAAAE,EAAW,QAAQ,MAC5B,EACA,OAAQ,IAAM,CACR,GAAA,CAACA,EAAW,QACR,MAAA,IAAI,MAAMF,CAAa,EAExB,OAAAE,EAAW,QAAQ,QAC5B,EACA,MAAO,IAAM,CACP,GAAA,CAACA,EAAW,QACR,MAAA,IAAI,MAAMF,CAAa,EAExB,OAAAE,EAAW,QAAQ,OAC5B,EACA,GAAI,IAAM,CACJ,GAAA,CAACA,EAAW,QACR,MAAA,IAAI,MAAMF,CAAa,EAExB,OAAAE,EAAW,QAAQ,IAC5B,CAAA,CAEJ,CAaa,MAAAC,EACXC,GACkE,CAC5D,MAAAC,EAAYC,SAAmC,IAAI,EACzDC,OAAAA,EAAAA,oBAA0BH,EAAY,IAAMC,EAAU,OAA+B,EAC9E,CAACA,EAAWJ,GAA0BI,CAAS,CAAC,CACzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}