import{j as b}from"./jsx-runtime-Cl2eCCBe.js";import{r as i}from"./index-Cqyox1Tj.js";import{u as ae,I as re}from"./inputWrapper.component-BPs1nEnr.js";import{u as ie,a as se}from"./useDidUpdateEffect-CQd39TVK.js";import{c as p}from"./classNames-TtGgGdEV.js";import{o as ne}from"./radixDialog-CBrwtQa5.js";import{a as oe}from"./label.component-BjYIJ-30.js";import{u as le}from"./config.context-DSGy4VcJ.js";const x=i.forwardRef(({milliseconds:o,value:l,onValueChange:c,onChange:d,...T},v)=>{const[w,m]=ae(o,l,c),I=i.useCallback(f=>{m(f.currentTarget.value),d==null||d(f)},[m,d]);return b.jsx("input",{ref:v,value:w,onChange:I,...T})});x.displayName="DebounceInput";const z=i.forwardRef(({bind:o,onChange:l,value:c,className:d,leftOverlay:T,rightOverlay:v,validationErrorMessages:w,validationMode:m,errorIcon:I,pending:f,disabled:N,disableOnPending:A,statusPosition:j,hideIconOnStatus:J,onValueChange:h,scrollValidationErrorsIntoView:X,delay:q,validationErrorsClassName:F,statusClassName:L,inputClassName:W,label:_,required:H,requiredIndicator:U,displaySize:S,labelClassName:$,labelId:G,wrapperTestId:K,error:P,autoValidate:Q,...s},R)=>{const Y=i.useId(),C=s.id??Y,[a,V,t]=oe(o,{value:c==null?void 0:c.toString(),validationErrorMessages:w,validationMode:m,validationErrorIcon:I,autoValidate:Q}),[u,E]=i.useState(a==null?void 0:a.toString());ie(()=>{(a==null?void 0:a.toString())!==(u==null?void 0:u.toString())&&E(a==null?void 0:a.toString())},[a]);const n=le({validationMode:t.validationMode,disableControlOnPending:A,hideInputErrorIconOnStatus:J,inputDisplaySize:S,inputStatusPosition:j,requiredIndicator:U,validationErrorIcon:t.validationErrorIcon,scrollValidationErrorsIntoView:X,autoValidate:t.autoValidate}),O=i.useCallback(e=>{if(s.type!=="number")return e;if(e)return Number.isNaN(parseFloat(e))?null:parseFloat(e)},[s.type]),D=i.useCallback(e=>{var B,y,k;const r=((k=(y=(B=o==null?void 0:o.bindConfig)==null?void 0:B.format)==null?void 0:y.toData)==null?void 0:k.call(y,e))||e;V(r)},[V,o]),g=i.useCallback(e=>{const r=O(e);r!==null&&(D(r),h==null||h(r))},[O,D,h]),Z=i.useCallback(e=>{E(e),g(e)},[g]),ee=i.useCallback(e=>{l==null||l(e);const r=e.currentTarget.value;E(r),g(r)},[l,g]);se(()=>{n.autoValidate&&t.isTouched&&t.validate()},[a]);const te=i.useCallback(e=>{var r;return n.autoValidate&&!t.isTouched&&t.validate(),t.setTouched(!0),ne(e),(r=s.onBlur)==null?void 0:r.call(s,e)},[t,n.autoValidate,s]),M={id:C,className:p("arm-input-base-input",W),value:(u==null?void 0:u.toString())??(o&&""),disabled:N,...s,onBlur:te};return b.jsxs(re,{"data-size":n.inputDisplaySize,className:p(d,"arm-input-base"),statusClassName:p(L,"arm-input-base-status"),validationErrorsClassName:p(F,"arm-input-base-validation"),leftOverlay:T,rightOverlay:v,validationErrorMessages:t.validationErrorMessages,errorIcon:t.validationErrorIcon,validationMode:t.validationMode,pending:f,disabled:N,statusPosition:n.inputStatusPosition,scrollValidationErrorsIntoView:n.scrollValidationErrorsIntoView,disableOnPending:n.disableControlOnPending,hideIconOnStatus:n.hideInputErrorIconOnStatus,label:_,labelId:G??C,labelClassName:p($,"arm-input-base-label"),required:H,error:P,requiredIndicator:n.requiredIndicator,"data-testid":K,displaySize:n.inputDisplaySize,children:[!!q&&b.jsx(x,{...s,...M,milliseconds:q,onChange:l,onValueChange:Z,ref:R,"data-size":S}),!q&&b.jsx("input",{...s,...M,onChange:ee,ref:R,"data-size":S})]})});z.displayName="Input";z.__docgenInfo={description:"A component which wraps up a native input element with some binding logic and some repeated elements (icons and stuff) for components which only contain a single input element.",methods:[],displayName:"Input",props:{statusPosition:{required:!1,tsType:{name:"union",raw:"'left' | 'right'",elements:[{name:"literal",value:"'left'"},{name:"literal",value:"'right'"}]},description:"which side of the button to show the spinner on - defaults to 'right'"},error:{required:!1,tsType:{name:"boolean"},description:"show an error state icon on the component (will be true automatically if validationErrorMessages are passed in or errors are in the binder)"},pending:{required:!1,tsType:{name:"boolean"},description:"show a spinner and disable"},validationMode:{required:!1,tsType:{name:"union",raw:"'icon' | 'message' | 'both'",elements:[{name:"literal",value:"'icon'"},{name:"literal",value:"'message'"},{name:"literal",value:"'both'"}]},description:"how to render the validation errors"},errorIcon:{required:!1,tsType:{name:"JSX.Element"},description:"the icon to use for validation errors"},className:{required:!1,tsType:{name:"string"},description:"an optional CSS className for the rendered status"},validationErrorMessages:{required:!1,tsType:{name:"Array",elements:[{name:"union",raw:"string | JSX.Element",elements:[{name:"string"},{name:"JSX.Element"}]}],raw:"ValidationMessage[]"},description:"array of validation errors to render"},disabled:{required:!1,tsType:{name:"boolean"},description:"disable use"},hideIconOnStatus:{required:!1,tsType:{name:"boolean"},description:"hide the icon on the given side if there is an active status - defaults to true"},disableOnPending:{required:!1,tsType:{name:"boolean"},description:"when pending is true should also disable the input"},scrollValidationErrorsIntoView:{required:!1,tsType:{name:"boolean"},description:"will scroll the validation errors into view when the length of validationErrors changes"},leftOverlay:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Content to show on the left of the input"},rightOverlay:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Content to show on the right of the input"},statusClassName:{required:!1,tsType:{name:"string"},description:"Class name for the status component"},validationErrorsClassName:{required:!1,tsType:{name:"string"},description:"Class name for the validation errors component"},labelClassName:{required:!1,tsType:{name:"string"},description:"Class name for the label component"},labelId:{required:!1,tsType:{name:"string"},description:"Optional ID for the label element"},label:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:"Some optional label content"},required:{required:!1,tsType:{name:"boolean"},description:"Should the label show a required indicator?"},requiredIndicator:{required:!1,tsType:{name:"ReactReactNode",raw:"React.ReactNode"},description:'Symbol to use as the required indicator on the label, defaults to "*"'},displaySize:{required:!1,tsType:{name:"union",raw:"'small' | 'medium' | 'large' | CustomString",elements:[{name:"literal",value:"'small'"},{name:"literal",value:"'medium'"},{name:"literal",value:"'large'"},{name:"literal",value:"`custom-${string}`"}]},description:"which size variant to use"},inputClassName:{required:!1,tsType:{name:"string"},description:"A class name to apply to the input element"},bind:{required:!1,tsType:{name:"IBindingProps",elements:[{name:"TValue"}],raw:"IBindingProps<TValue>"},description:"prop for binding to an Armstrong form binder (see forms documentation)"},onValueChange:{required:!1,tsType:{name:"signature",type:"function",raw:"(value?: TValue) => void",signature:{arguments:[{type:{name:"TValue"},name:"value"}],return:{name:"void"}}},description:"Called when the value changes, takes into account any delay values and other effects."},delay:{required:!1,tsType:{name:"number"},description:"The delay config, used to set throttle and debounce values."},value:{required:!1,tsType:{name:"TValue"},description:"The current value of the input"},wrapperTestId:{required:!1,tsType:{name:"string"},description:"optional test ID to use for the input wrapper"},autoValidate:{required:!1,tsType:{name:"boolean"},description:"should the input validate automatically against the provided schema? Default: `true`"},type:{required:!1,tsType:{name:"HTMLInputTypeAttribute"},description:""}},composes:["Omit"]};export{z as I};
