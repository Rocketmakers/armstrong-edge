{"version":3,"file":"arrays-f0b52596.js","sources":["../../src/utils/arrays.ts"],"sourcesContent":["import { Dictionary } from './objects';\n\n/** Convert an array of arrays into a single array */\nexport function flatten<T>(...arrays: (T[] | undefined)[]) {\n  return arrays.reduce<T[]>((output, current) => (current ? [...output, ...current] : output), []);\n}\n\n/** Turn an array into a dictionary of items in that array by a given key */\nexport function arrayToDictionary<T, Keys extends string = string>(array: T[], getKey: keyof T | ((item: T) => Keys)) {\n  return array.reduce<Dictionary<T, Keys>>((dictionary, currentValue) => {\n    const key = typeof getKey === 'function' ? getKey(currentValue) : (currentValue[getKey] as unknown as Keys);\n\n    return { ...dictionary, [key]: currentValue };\n  }, {} as Dictionary<T, Keys>);\n}\n\n/** A dictionary of arrays */\ntype ArrayDictionary<T, Keys extends string> = Record<Keys, T[]>;\n\n/** Sort an array into a dictionary of arrays keyed by a value to sort on */\nexport function arrayToArrayDictionary<T, Keys extends string = string>(\n  array: T[],\n  getKey: (item: T) => Keys\n): ArrayDictionary<T, Keys> {\n  return array.reduce<ArrayDictionary<T, Keys>>((dictionary, currentValue) => {\n    const key = getKey(currentValue);\n\n    return { ...dictionary, [key]: [...(dictionary[key as keyof typeof dictionary] || []), currentValue] };\n  }, {} as ArrayDictionary<T, Keys>);\n}\n\ninterface IArrayWithKey<T, Keys extends string> {\n  items: T[];\n  key: Keys;\n}\n\n/** Sort an array into an array of objects with a key and an array of items on it */\nexport function arrayToArraysByKey<T, Keys extends string = string>(array: T[], getKey: (item: T) => Keys) {\n  const dictionary = arrayToArrayDictionary(array, getKey);\n  return Object.keys(dictionary).map<IArrayWithKey<T, Keys>>(key => ({ key: key as Keys, items: dictionary[key] }));\n}\n\n/** A variant of findIndex that returns the index of the last item in the array where the callback returns true */\nexport function findLastIndex<T>(array: T[], callback: (item: T) => boolean) {\n  return array.reduce((output, item, index) => (callback(item) ? index : output), -1);\n}\n/**\n * Re-indexes an array from a specific index point.\n * - Does not mutate the passed array, returns a new one.\n * @example If `[\"a\", \"b\", \"c\", \"d\", \"e\"]` was passed with a `startFrom` index of `2`, the result would be `[\"c\", \"d\", \"e\", \"a\", \"b\"]`\n * @param array The array to clone and re-index.\n * @param startFrom The current index of the new first item.\n * @returns A new array, re-indexed with the item at the `startFrom` index now first.\n */\nexport function reIndex<T>(array: T[], startFrom: number): T[] {\n  if (startFrom === 0) {\n    return [...array];\n  }\n  return [...array.slice(startFrom), ...array.slice(0, startFrom)];\n}\n\n/**\n * A version of `map` which loops a specified number of times and returns the index as the map arg.\n * - Useful when you want to run a `map` x number of times but you don't have a specific array to loop.\n * @param count The number of times to run the mapper.\n * @param mapper A function to call x number of times (x = `count`).\n * @returns The array of newly mapped items.\n */\nexport function repeat<TMapped>(count: number, mapper: (index: number) => TMapped): TMapped[] {\n  const array: number[] = [];\n  for (let i = 0; i < count; i += 1) {\n    array.push(i);\n  }\n  return array.map(mapper);\n}\n\n/**\n * Get the overall index of an item inside an array of arrays\n *\n * I.E. [[0,1,2], [3,4], [5,6,7]]\n */\nexport function getOverallIndex<T>(innerIndex: number, outerIndex: number, arrays: { items: T[] }[]) {\n  return arrays.slice(0, outerIndex).reduce((output, array) => array.items.length + output, 0) + innerIndex;\n}\n\n/** Get the item inside an array of arrays at an overall index */\nexport function getAtOverallIndex<T>(index: number, arrays: { items: T[] }[]) {\n  let totalIndex = 0;\n\n  for (const array of arrays) {\n    const newIndex = totalIndex + array.items.length;\n\n    if (index < newIndex) {\n      return array.items[index - totalIndex];\n    }\n\n    totalIndex = newIndex;\n  }\n  return undefined;\n}\n"],"names":["findLastIndex","array","callback","output","item","index","repeat","count","mapper","i"],"mappings":"AA2CgB,SAAAA,EAAiBC,EAAYC,EAAgC,CACpE,OAAAD,EAAM,OAAO,CAACE,EAAQC,EAAMC,IAAWH,EAASE,CAAI,EAAIC,EAAQF,EAAS,EAAE,CACpF,CAuBgB,SAAAG,EAAgBC,EAAeC,EAA+C,CAC5F,MAAMP,EAAkB,CAAA,EACxB,QAASQ,EAAI,EAAGA,EAAIF,EAAOE,GAAK,EAC9BR,EAAM,KAAKQ,CAAC,EAEP,OAAAR,EAAM,IAAIO,CAAM,CACzB"}