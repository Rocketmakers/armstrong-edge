{"version":3,"file":"useContentMemo-b4c57d54.js","sources":["../../src/hooks/useSSRLayoutEffect.ts","../../src/hooks/useContentMemo.ts"],"sourcesContent":["import * as React from 'react';\n\n/**\n * A version of the React `useLayoutEffect` that supports server side rendering by falling back to a standard `useEffect`.\n */\nexport const useSSRLayoutEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n\n/**\n * Version of `useSSRLayoutEffect` which won't run the effect on initial render, only when the dependencies update.\n * @param effect The effect to run when the dependencies update.\n * @param deps The dependencies for the effect\n * @returns The same as a React `useLayoutEffect` hook\n */\nexport const useDidUpdateSSRLayoutEffect = (effect: React.EffectCallback, deps?: React.DependencyList) => {\n  const isFirstRender = React.useRef(true);\n\n  React.useEffect(() => {\n    isFirstRender.current = false;\n  }, []);\n\n  return useSSRLayoutEffect(() => {\n    if (!isFirstRender.current) {\n      return effect();\n    }\n    return undefined;\n  }, deps);\n};\n","/*\n * useContentMemo\n * --------------------------------------\n * Utility hook for content based memoization\n */\nimport * as React from 'react';\n\nimport { contentDependency } from '../utils';\n\n/**\n * Returns a reference to the passed in item which only updates when the *content* of the item updates rather than just the pointer reference\n * WARNING: This hook was designed for config/state objects and assumes that array/object items are serializable\n * @param item The item to pass a reference for\n * @returns A memoized version of the item passed in\n */\nexport const useContentMemo = <T>(item: T): T => {\n  const contentDependencyResult = React.useMemo(() => contentDependency(item), [item]);\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps -- This is necessary in the context of a content comparison\n  return React.useMemo(() => item, [contentDependencyResult]);\n};\n"],"names":["useSSRLayoutEffect","React.useLayoutEffect","React.useEffect","useDidUpdateSSRLayoutEffect","effect","deps","isFirstRender","React.useRef","useContentMemo","item","contentDependencyResult","React.useMemo","contentDependency"],"mappings":"yFAKO,MAAMA,EAAqB,OAAO,OAAW,IAAcC,kBAAwBC,EAAM,UAQnFC,EAA8B,CAACC,EAA8BC,IAAgC,CAClG,MAAAC,EAAgBC,SAAa,EAAI,EAEvCL,OAAAA,EAAAA,UAAgB,IAAM,CACpBI,EAAc,QAAU,EAC1B,EAAG,CAAE,CAAA,EAEEN,EAAmB,IAAM,CAC1B,GAAA,CAACM,EAAc,QACjB,OAAOF,EAAO,GAGfC,CAAI,CACT,ECXaG,EAAqBC,GAAe,CACzC,MAAAC,EAA0BC,EAAAA,QAAc,IAAMC,EAAkBH,CAAI,EAAG,CAACA,CAAI,CAAC,EAGnF,OAAOE,EAAc,QAAA,IAAMF,EAAM,CAACC,CAAuB,CAAC,CAC5D"}