{"version":3,"file":"checkboxList.stories-1007ac51.js","sources":["../../src/components/checkboxList/checkboxList.component.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { IBindingProps, useBindingState } from '../../form';\nimport {\n  ArmstrongFCExtensions,\n  ArmstrongFCReturn,\n  ArmstrongId,\n  ArmstrongVFCProps,\n  DisplaySize,\n  getContentFromOption,\n  IArmstrongOption,\n} from '../../types';\nimport { concat } from '../../utils';\nimport { Checkbox, ICheckboxProps } from '../checkbox/checkbox.component';\nimport { useArmstrongConfig } from '../config';\nimport { IInputWrapperProps } from '../inputWrapper';\nimport { Label } from '../label';\nimport { ValidationErrors } from '../validationErrors';\n\nimport './checkboxList.theme.css';\n\nexport interface ICheckboxListProps<Id extends ArmstrongId>\n  extends Pick<\n      IInputWrapperProps,\n      | 'scrollValidationErrorsIntoView'\n      | 'validationMode'\n      | 'errorIcon'\n      | 'validationErrorMessages'\n      | 'validationErrorsClassName'\n    >,\n    React.RefAttributes<HTMLDivElement> {\n  /**  prop for binding to an Armstrong form binder (see forms documentation) */\n  bind?: IBindingProps<Id[]>;\n\n  /** The options to be shown in the input */\n  options: IArmstrongOption<\n    Id,\n    Omit<\n      ICheckboxProps<boolean>,\n      | 'bind'\n      | 'checked'\n      | 'disabled'\n      | 'label'\n      | 'validationErrorsClassName'\n      | 'validationErrorMessages'\n      | 'scrollValidationErrorsIntoView'\n      | 'ref'\n    >\n  >[];\n\n  /** CSS className property */\n  className?: string;\n\n  /** the current value of the radioInput */\n  value?: Id[];\n\n  /** Fired when the value changes */\n  onChange?: (newValue: Id[]) => void;\n\n  /** show an error state icon on the component (will be true automatically if validationErrorMessages are passed in or errors are in the binder) */\n  error?: boolean;\n\n  /** (Optional) A custom JSX.Element for the checked indicator. */\n  customIndicator?: JSX.Element;\n\n  /** which size variant to use */\n  displaySize?: DisplaySize;\n\n  /** Label for the whole radio group itself */\n  label?: string;\n\n  /** (Optional) Class name for the label component */\n  labelClassName?: string;\n\n  /** (Optional) Id to use for the checkbox. Falls back to React ID if not provided */\n  labelId?: string;\n\n  /** Indicates if field must be used to submit form */\n  required?: boolean;\n\n  /** wether input's value can be changed by user */\n  disabled?: boolean;\n\n  /** Symbol to use as the required indicator on the label, defaults to \"*\" */\n  requiredIndicator?: React.ReactNode;\n}\n\n/** Render a list of radio inputs which binds to a single string */\nexport const CheckboxList = React.forwardRef<HTMLDivElement, ICheckboxListProps<ArmstrongId>>(\n  (\n    {\n      bind,\n      options,\n      className,\n      value,\n      errorIcon,\n      validationMode,\n      validationErrorMessages,\n      onChange,\n      customIndicator,\n      error,\n      displaySize,\n      label,\n      labelClassName,\n      labelId,\n      required,\n      disabled,\n      scrollValidationErrorsIntoView,\n      validationErrorsClassName,\n      requiredIndicator,\n      ...nativeProps\n    },\n    ref\n  ) => {\n    const globals = useArmstrongConfig({\n      validationMode,\n      requiredIndicator,\n      scrollValidationErrorsIntoView,\n      validationErrorIcon: errorIcon,\n      inputDisplaySize: displaySize,\n    });\n\n    const [boundValue, setBoundValue, bindConfig] = useBindingState(bind, {\n      value,\n      validationErrorMessages,\n      validationErrorIcon: errorIcon,\n      validationMode,\n      onChange,\n    });\n\n    const onCheckedChange = React.useCallback(\n      (option: typeof options[0], newValue: boolean) => {\n        // Always mapping the bound value from the original array of options.\n        // It's a bit more cumbersome, but it means that the bound value ids will always be in the same order as the options, which is what you'd expect as a consuming app.\n        const newBoundValue = options.reduce((arr, op) => {\n          const isSelectedOption = op.id === option.id;\n          const isCurrentlyBound = boundValue?.includes(op.id);\n          const addIfCurrentlyBound = !isSelectedOption || newValue;\n          const addIfNotCurrentlyBound = isSelectedOption && newValue;\n          const shouldAdd = isCurrentlyBound ? addIfCurrentlyBound : addIfNotCurrentlyBound;\n          return [...arr, ...(shouldAdd ? [op.id] : [])];\n        }, [] as ArmstrongId[]);\n        setBoundValue?.(newBoundValue);\n      },\n      [setBoundValue, boundValue, options]\n    );\n\n    return (\n      <>\n        {label && (\n          <Label\n            id={labelId}\n            className={concat('arm-checkbox-list-label', labelClassName)}\n            required={required}\n            requiredIndicator={globals.requiredIndicator}\n            displaySize={globals.inputDisplaySize}\n          >\n            {label}\n          </Label>\n        )}\n        <div\n          className={concat('arm-checkbox-list', className)}\n          ref={ref}\n          data-error={error || !!validationErrorMessages?.length}\n          data-disabled={disabled}\n          data-size={globals.inputDisplaySize}\n          {...nativeProps}\n        >\n          {options.map(option => {\n            const isChecked = boundValue?.includes(option.id);\n            return (\n              <Checkbox\n                customIndicator={customIndicator}\n                {...(option.htmlProps ?? {})}\n                key={option.id}\n                className=\"arm-checkbox-list-item\"\n                checked={isChecked}\n                displaySize={globals.inputDisplaySize}\n                onCheckedChange={v => onCheckedChange(option, v)}\n                disabled={disabled || option.disabled}\n                label={getContentFromOption(option, isChecked)}\n              />\n            );\n          })}\n          {bindConfig.shouldShowValidationErrorMessage && bindConfig.validationErrorMessages && (\n            <ValidationErrors\n              validationErrors={bindConfig.validationErrorMessages}\n              scrollIntoView={globals.scrollValidationErrorsIntoView}\n              className={concat('arm-checkbox-list-errors', validationErrorsClassName)}\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n  // type assertion to ensure generic works with RefForwarded component\n  // DO NOT CHANGE TYPE WITHOUT CHANGING THIS, FIND TYPE BY INSPECTING React.forwardRef\n) as (<Id extends ArmstrongId>(props: ArmstrongVFCProps<ICheckboxListProps<Id>, HTMLDivElement>) => ArmstrongFCReturn) &\n  ArmstrongFCExtensions<ICheckboxListProps<ArmstrongId>>;\n\nCheckboxList.displayName = 'CheckboxList';\n"],"names":["CheckboxList","React.forwardRef","bind","options","className","value","errorIcon","validationMode","validationErrorMessages","onChange","customIndicator","error","displaySize","label","labelClassName","labelId","required","disabled","scrollValidationErrorsIntoView","validationErrorsClassName","requiredIndicator","nativeProps","ref","globals","useArmstrongConfig","boundValue","setBoundValue","bindConfig","useBindingState","onCheckedChange","React.useCallback","option","newValue","newBoundValue","arr","op","isSelectedOption","shouldAdd","jsxs","Fragment","jsx","Label","concat","isChecked","createElement","Checkbox","v","getContentFromOption","ValidationErrors"],"mappings":"y/BAwFO,MAAAA,EAAAC,EAAA,WAA2B,CAAA,CAE9B,KAAAC,EACE,QAAAC,EACA,UAAAC,EACA,MAAAC,EACA,UAAAC,EACA,eAAAC,EACA,wBAAAC,EACA,SAAAC,EACA,gBAAAC,EACA,MAAAC,EACA,YAAAC,EACA,MAAAC,EACA,eAAAC,EACA,QAAAC,GACA,SAAAC,GACA,SAAAC,EACA,+BAAAC,GACA,0BAAAC,GACA,kBAAAC,GACA,GAAAC,EACG,EAAAC,KAAA,CAIL,MAAAC,EAAAC,GAAA,CAAmC,eAAAjB,EACjC,kBAAAa,GACA,+BAAAF,GACA,oBAAAZ,EACqB,iBAAAM,CACH,CAAA,EAGpB,CAAAa,EAAAC,EAAAC,CAAA,EAAAC,GAAA1B,EAAA,CAAsE,MAAAG,EACpE,wBAAAG,EACA,oBAAAF,EACqB,eAAAC,EACrB,SAAAE,CACA,CAAA,EAGFoB,GAAAC,EAAA,YAA8B,CAAAC,EAAAC,IAAA,CAI1B,MAAAC,EAAA9B,EAAA,OAAA,CAAA+B,GAAAC,IAAA,CACE,MAAAC,EAAAD,EAAA,KAAAJ,EAAA,GAIAM,IAHAZ,GAAA,YAAAA,EAAA,SAAAU,EAAA,KACA,CAAAC,GAAAJ,EACAI,GAAAJ,EAEA,MAAA,CAAA,GAAAE,GAAA,GAAAG,GAAA,CAAAF,EAAA,EAAA,EAAA,CAAA,CAAA,CAA6C,EAAA,CAAA,CAAA,EAE/CT,GAAA,MAAAA,EAAAO,EAA6B,EAC/B,CAAAP,EAAAD,EAAAtB,CAAA,CACmC,EAGrC,OAAAmC,EAAAC,EAAA,CAAA,SAAA,CAEK1B,GAAA2B,EACCC,GAAC,CAAA,GAAA1B,GACK,UAAA2B,EAAA,0BAAA5B,CAAA,EACuD,SAAAE,GAC3D,kBAAAO,EAAA,kBAC2B,YAAAA,EAAA,iBACN,SAAAV,CAEpB,CAAA,EACHyB,EAEF,MAAC,CAAA,UAAAI,EAAA,oBAAAtC,CAAA,EACiD,IAAAkB,GAChD,aAAAX,GAAA,CAAA,EAAAH,GAAA,MAAAA,EAAA,QACgD,gBAAAS,EACjC,YAAAM,EAAA,iBACI,GAAAF,GACf,SAAA,CAEHlB,EAAA,IAAA4B,GAAA,CACC,MAAAY,EAAAlB,GAAA,YAAAA,EAAA,SAAAM,EAAA,IACA,OAAAa,EAAA,cACEC,GAAC,CAAA,gBAAAnC,EACC,GAAAqB,EAAA,WAAA,CAAA,EAC0B,IAAAA,EAAA,GACd,UAAA,yBACF,QAAAY,EACD,YAAApB,EAAA,iBACY,gBAAAuB,GAAAjB,GAAAE,EAAAe,CAAA,EAC0B,SAAA7B,GAAAc,EAAA,SAClB,MAAAgB,GAAAhB,EAAAY,CAAA,CACgB,CAAA,CAC/C,CAAA,EAEHhB,EAAA,kCAAAA,EAAA,yBAAAa,EAECQ,GAAC,CAAA,iBAAArB,EAAA,wBAC8B,eAAAJ,EAAA,+BACL,UAAAmB,EAAA,2BAAAvB,EAAA,CAC+C,CAAA,CACzE,CAAA,CAAA,CAEJ,CAAA,CAAA,CACF,CAKN,EAGAnB,EAAA,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}