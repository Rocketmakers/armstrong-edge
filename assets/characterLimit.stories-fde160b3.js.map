{"version":3,"file":"characterLimit.stories-fde160b3.js","sources":["../../src/components/characterLimit/characterLimit.component.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { FormValidationMode, IBindingProps, useBindingState } from '../../form';\nimport { ArmstrongFCExtensions, ArmstrongFCProps, ArmstrongFCReturn, NullOrUndefined } from '../../types';\nimport { concat } from '../../utils/classNames';\nimport { useArmstrongConfig } from '../config';\n\nimport './characterLimit.theme.css';\n\nexport interface ICharacterLimitProps<TBind extends NullOrUndefined<string>>\n  extends Omit<React.RefAttributes<HTMLDivElement>, 'ref'> {\n  /**  prop for binding to an Armstrong form binder (see forms documentation) */\n  bind: IBindingProps<TBind>;\n\n  /** the current value of the string to count */\n  value?: TBind;\n\n  /** the character limit for the bound input */\n  limit: number;\n\n  /** the limit should be enforced by the bind in this component - by default you will have to handle this yourself */\n  shouldEnforce?: boolean;\n\n  /** CSS className property */\n  className?: string;\n\n  /** the icon to use for the validation errors */\n  validationErrorIcon?: JSX.Element;\n\n  /** (Optional) Class name for the validation errors */\n  validationErrorsClassName?: string;\n\n  /** (Optional) Title for the validation errors */\n  validationErrorsTitle?: string;\n\n  /** how to render the validation errors */\n  validationMode?: FormValidationMode;\n}\n\n/** Render a character limit from a bound value, showing as an error if the user  */\nexport const CharacterLimit = React.forwardRef<HTMLDivElement, ICharacterLimitProps<NullOrUndefined<string>>>(\n  (\n    {\n      bind,\n      limit,\n      shouldEnforce,\n      value,\n      className,\n      validationErrorIcon,\n      validationErrorsClassName,\n      validationErrorsTitle,\n      validationMode,\n      ...nativeProps\n    },\n    ref\n  ) => {\n    const globals = useArmstrongConfig({\n      validationErrorIcon,\n      validationMode,\n    });\n\n    const [boundValue, setBoundValue] = useBindingState(bind, { value });\n\n    const exceeded = boundValue && boundValue.length > limit;\n\n    React.useLayoutEffect(() => {\n      if (shouldEnforce && exceeded) {\n        setBoundValue?.(boundValue?.slice(0, limit));\n      }\n    }, [boundValue, exceeded, limit, setBoundValue, shouldEnforce]);\n\n    return (\n      <div ref={ref} className={concat('arm-character-limit', className)} data-exceeded={exceeded} {...nativeProps}>\n        <div className=\"arm-character-limit-text\">\n          {boundValue?.length}/{limit}\n        </div>\n        {exceeded && (\n          <div\n            className={concat('arm-character-limit-icon', validationErrorsClassName)}\n            title={validationErrorsTitle ?? 'Character limit exceeded'}\n          >\n            {(globals.validationMode === 'both' || globals.validationMode === 'icon') && globals.validationErrorIcon}\n          </div>\n        )}\n      </div>\n    );\n  }\n  // type assertion to ensure generic works with RefForwarded component\n  // DO NOT CHANGE TYPE WITHOUT CHANGING THIS, FIND TYPE BY INSPECTING React.forwardRef\n) as (<TBind extends NullOrUndefined<string>>(\n  props: ArmstrongFCProps<ICharacterLimitProps<TBind>, HTMLDivElement>\n) => ArmstrongFCReturn) &\n  ArmstrongFCExtensions<ICharacterLimitProps<NullOrUndefined<string>>>;\n\nCharacterLimit.displayName = 'CharacterLimit';\n"],"names":["CharacterLimit","React.forwardRef","bind","limit","shouldEnforce","value","className","validationErrorIcon","validationErrorsClassName","validationErrorsTitle","validationMode","nativeProps","ref","globals","useArmstrongConfig","boundValue","setBoundValue","useBindingState","exceeded","React.useLayoutEffect","jsxs","concat","jsx"],"mappings":"o1BAwCO,MAAAA,EAAAC,EAAA,WAA6B,CAAA,CAEhC,KAAAC,EACE,MAAAC,EACA,cAAAC,EACA,MAAAC,EACA,UAAAC,EACA,oBAAAC,EACA,0BAAAC,EACA,sBAAAC,EACA,eAAAC,EACA,GAAAC,CACG,EAAAC,IAAA,CAIL,MAAAC,EAAAC,EAAA,CAAmC,oBAAAP,EACjC,eAAAG,CACA,CAAA,EAGF,CAAAK,EAAAC,CAAA,EAAAC,EAAAf,EAAA,CAAA,MAAAG,CAAA,CAAA,EAEAa,EAAAH,GAAAA,EAAA,OAAAZ,EAEAgB,OAAAA,EAAAA,gBAAA,IAAA,CACEf,GAAAc,IACEF,GAAA,MAAAA,EAAAD,GAAA,YAAAA,EAAA,MAAA,EAAAZ,IACF,EAAA,CAAAY,EAAAG,EAAAf,EAAAa,EAAAZ,CAAA,CAAA,EAGFgB,EAAA,MAAA,CAAA,IAAAR,EAAA,UAAAS,EAAA,sBAAAf,CAAA,EAAA,gBAAAY,EAAA,GAAAP,EAAA,SAAA,CAEIS,EAAA,MAAA,CAAA,UAAA,2BAAA,SAAA,CACGL,GAAA,YAAAA,EAAA,OAAY,IAAOZ,CAAE,EAAA,EACxBe,GAAAI,EAEE,MAAC,CAAA,UAAAD,EAAA,2BAAAb,CAAA,EACwE,MAAAC,GAAA,2BACvC,UAAAI,EAAA,iBAAA,QAAAA,EAAA,iBAAA,SAAAA,EAAA,mBAEqD,CAAA,CACvF,CAAA,CAAA,CAEJ,CAKN,EAKAb,EAAA,YAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}