{"version":3,"file":"expandable.stories-60330e23.js","sources":["../../src/utils/globals.ts","../../src/hooks/useDidUpdateEffect.ts","../../src/hooks/useEventListener.ts","../../src/hooks/useResizeObserver.ts","../../src/hooks/useBoundingClientRect.ts","../../src/components/expandable/expandable.component.tsx"],"sourcesContent":["/** Globals wrapped up in type checks to ensure Armstrong won't break any server side rendering where using them would otherwise throw an error */\n\n/** The global window object, protected if in an environment that doesn't support window */\nexport const Window = typeof window === 'undefined' ? undefined : window;\n\n/** The global document object, protected if in an environment that doesn't support document */\nexport const Document = typeof document === 'undefined' ? undefined : document;\n\n/** Does the current environment support resize observer */\nexport const supportsResizeObserver = !!Window?.ResizeObserver;\n\n/** Does the current environment support intersection observer */\nexport const supportsIntersectionObserver = !!Window?.IntersectionObserver;\n\n/** Does the current environment support mutation observer */\nexport const supportsMutationObserver = !!Window?.MutationObserver;\n\n/** Does the current environment support performance observer */\nexport const supportsPerformanceObserver = !!Window?.PerformanceObserver;\n\n/** Based on the existence of the global window object, does it seem like this is currently in a browser environment rather than SSR */\nexport const isBrowser = !!Window;\n","import * as React from 'react';\n\n/** A useEffect which won't run after the first render, will only run once the deps start changing */\nexport function useDidUpdateEffect(callback: React.EffectCallback, deps?: React.DependencyList) {\n  const didMountRef = React.useRef(false);\n\n  return React.useEffect(() => {\n    if (!didMountRef.current) {\n      didMountRef.current = true;\n      return undefined;\n    }\n    return callback();\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- This is just silly, it's a hook extension\n  }, deps);\n}\n","import * as React from 'react';\n\nimport { Window } from '../utils/globals';\n\n/**\n * Hook to add an event listener, and remove it when the component unmounts\n *\n * @param eventHandler the callback to run when the event fires\n * @param type the name of the event to listen to\n * @param element the element to add the listener to, defaults to window\n */\nexport function useEventListener(\n  type: string,\n  eventHandler: (e: unknown) => unknown,\n  element: Pick<HTMLElement, 'addEventListener' | 'removeEventListener'> | undefined = Window,\n  options: boolean | AddEventListenerOptions | undefined = { passive: true },\n  enabled = true\n) {\n  React.useEffect(() => {\n    if (element && enabled) {\n      element.addEventListener(type, eventHandler, options);\n\n      return () => {\n        if (typeof options === 'object') {\n          const { once, passive, ...removeOptions } = options;\n          element.removeEventListener(type, eventHandler, removeOptions);\n        } else {\n          element.removeEventListener(type, eventHandler, options);\n        }\n      };\n    }\n    return undefined;\n  }, [eventHandler, element, type, enabled, options]);\n}\n","import * as React from 'react';\n\nimport { isBrowser, supportsResizeObserver } from '../utils/globals';\nimport { useContentMemo } from './useContentMemo';\nimport { useSSRLayoutEffect } from './useSSRLayoutEffect';\n\n/**\n * Use an resize observer to fire the passed callback - also cleans up on unmount. Can either be used by just passing in a ref, or by using the functions returned to observe and disconnect\n * @param callback the callback to be fired\n * @param optionsInput options for the mutation observer\n * @param ref the html element to watch\n *\n */\nexport function useResizeObserver(\n  callback: ResizeObserverCallback,\n  optionsInput?: ResizeObserverOptions,\n  ref?: React.MutableRefObject<Element | undefined | null>\n) {\n  const observer = React.useRef<ResizeObserver>();\n  const options = useContentMemo(optionsInput);\n\n  const observe = React.useCallback(\n    (element: Element) => {\n      observer.current = new ResizeObserver(callback);\n      observer.current.observe(element, options);\n    },\n    [callback, options]\n  );\n\n  const unobserve = React.useCallback((element: Element) => {\n    if (observer.current) {\n      observer.current.unobserve(element);\n    }\n  }, []);\n\n  const disconnect = React.useCallback(() => {\n    observer.current?.disconnect();\n  }, []);\n\n  useSSRLayoutEffect(() => {\n    if (!!ref?.current && isBrowser && supportsResizeObserver) {\n      observe(ref.current);\n\n      return () => {\n        if (ref.current) {\n          unobserve(ref.current);\n        }\n      };\n    }\n    return undefined;\n  }, [observe, unobserve, ref]);\n\n  React.useEffect(() => disconnect, [disconnect]);\n\n  return {\n    observer,\n    unobserve,\n    disconnect,\n  };\n}\n","import * as React from 'react';\n\nimport { contentDependency } from '../utils';\nimport { Document } from '../utils/globals';\nimport { useDidUpdateEffect } from './useDidUpdateEffect';\nimport { useEventListener } from './useEventListener';\nimport { useResizeObserver } from './useResizeObserver';\n\nexport type UseBoundingClientRectReturn = [DOMRect, () => void];\n\n/**\n * Get the size of the element with the given ref - uses a resize observer, listens to scroll events, and listens to resize events\n * WARNING: positions will not update automatically unless happening at the same time as a resize, if you need to do anything fancier, you'll have to\n * use the callback which is the second item in the returned array to force a resize\n * @param ref the html element to watch\n */\nexport function useBoundingClientRect(\n  ref: React.MutableRefObject<Element | undefined | null>,\n  onChange?: (newBoundingClientRect: DOMRect) => void,\n  listenToScroll = true\n): UseBoundingClientRectReturn {\n  const [rect, setRect] = React.useState<DOMRect>(ref.current?.getBoundingClientRect() || new DOMRect(0, 0, 0, 0));\n\n  const domRectToObject = React.useCallback((domRect: DOMRect) => {\n    const { top, right, bottom, left, width, height, x, y } = domRect;\n    return { top, right, bottom, left, width, height, x, y };\n  }, []);\n\n  const setRectSize = React.useCallback(() => {\n    if (ref.current) {\n      const boundingClientRect = ref.current.getBoundingClientRect();\n      if (contentDependency(domRectToObject(boundingClientRect)) !== contentDependency(domRectToObject(rect))) {\n        onChange?.(boundingClientRect);\n        setRect(boundingClientRect);\n      }\n    }\n  }, [ref, domRectToObject, rect, onChange]);\n\n  /** Run the callback to get the element's size whenever it resizes */\n  useResizeObserver(setRectSize, {}, ref);\n\n  useDidUpdateEffect(() => {\n    if (listenToScroll) {\n      setRectSize();\n    }\n  }, [listenToScroll]);\n\n  const onScroll = React.useCallback(() => {\n    if (listenToScroll) {\n      setRectSize();\n    }\n  }, [listenToScroll, setRectSize]);\n\n  useEventListener('resize', setRectSize, Document);\n  useEventListener('scroll', onScroll, Document, { capture: true });\n\n  React.useEffect(() => {\n    setRectSize();\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- we don't want to re-trigger when the function is redefined\n  }, []);\n\n  return [rect, setRectSize];\n}\n","import * as React from 'react';\n\nimport { useBoundingClientRect } from '../../hooks/useBoundingClientRect';\nimport { concat } from '../../utils/classNames';\n\nimport './expandable.theme.css';\n\nexport interface IExpandableProps extends React.DetailedHTMLProps<React.HTMLProps<HTMLDivElement>, HTMLDivElement> {\n  /** is the expandable region open, if false will take up no space */\n  isOpen?: boolean;\n\n  /** Should animate the height expansion */\n  animate?: boolean;\n}\n\n/** A div which will automatically resize depending on the size of its children */\nexport const Expandable = React.forwardRef<HTMLDivElement, React.PropsWithChildren<IExpandableProps>>(\n  ({ className, children, style, animate, isOpen, ...nativeProps }, ref) => {\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const [{ height }] = useBoundingClientRect(contentRef);\n\n    return (\n      <div\n        {...nativeProps}\n        className={concat('arm-expandable', className)}\n        style={\n          {\n            ...(animate ? { '--arm-expandable-height': `${height}px` } : {}),\n            ...(style || {}),\n          } as React.CSSProperties\n        }\n        data-animate={!!animate}\n        data-is-open={!!isOpen}\n        ref={ref}\n      >\n        <div ref={contentRef} className=\"arm-expandable-content\">\n          {children}\n        </div>\n      </div>\n    );\n  }\n);\n\nExpandable.displayName = 'Expandable';\n\nExpandable.defaultProps = {\n  animate: true,\n};\n"],"names":["Window","Document","supportsResizeObserver","isBrowser","useDidUpdateEffect","callback","deps","didMountRef","React.useRef","React.useEffect","useEventListener","type","eventHandler","element","options","enabled","once","passive","removeOptions","useResizeObserver","optionsInput","ref","observer","useContentMemo","observe","React.useCallback","unobserve","disconnect","_a","useSSRLayoutEffect","useBoundingClientRect","onChange","listenToScroll","rect","setRect","React.useState","domRectToObject","domRect","top","right","bottom","left","width","height","x","y","setRectSize","boundingClientRect","contentDependency","onScroll","Expandable","React.forwardRef","className","children","style","animate","isOpen","nativeProps","contentRef","jsx","concat"],"mappings":"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"}