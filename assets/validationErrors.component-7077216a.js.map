{"version":3,"file":"validationErrors.component-7077216a.js","sources":["../../src/components/validationErrors/validationErrors.component.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport type { ValidationMessage } from '../../form';\nimport { concat } from '../../utils/classNames';\nimport { useArmstrongConfig } from '../config';\n\nimport './validationErrors.theme.css';\n\nexport interface IValidationErrorsProps {\n  /**\n   * The errors to render\n   * Can be a string or {key, element} key is necessary for animating in new messages\n   */\n  validationErrors: ValidationMessage[];\n\n  /** CSS className property */\n  className?: string;\n\n  /** will scroll the validation errors into view when the length of validationErrors changes */\n  scrollIntoView?: boolean;\n\n  /** overrides the error messaging and icon display used in the error validation display */\n  validationMode?: 'icon' | 'message' | 'both';\n}\n\n/** Render an array of validation errors as error messages */\nexport const ValidationErrors = React.forwardRef<\n  HTMLDivElement,\n  React.PropsWithChildren<IValidationErrorsProps & React.HTMLAttributes<HTMLDivElement>>\n>(({ validationErrors, className, scrollIntoView, validationMode, ...nativeProps }, ref) => {\n  const globals = useArmstrongConfig({\n    validationMode,\n    scrollValidationErrorsIntoView: scrollIntoView,\n  });\n\n  const internalRef = React.useRef<HTMLInputElement>(null);\n  React.useImperativeHandle(ref, () => internalRef.current as HTMLInputElement, [internalRef]);\n\n  React.useEffect(() => {\n    if (validationErrors.length > 0 && globals.scrollValidationErrorsIntoView) {\n      internalRef.current?.scrollIntoView({\n        block: 'center',\n        behavior: 'smooth',\n      });\n    }\n  }, [validationErrors.length, globals.scrollValidationErrorsIntoView]);\n\n  /** If the error is a JSX element use the key on the element or the index */\n  const getKey = React.useCallback((error: ValidationMessage, index: number) => {\n    if (typeof error === 'string') {\n      return error + index;\n    }\n    return error?.key ?? index;\n  }, []);\n\n  const shouldShowErrorMessage = globals.validationMode === 'both' || globals.validationMode === 'message';\n\n  return (\n    <div ref={internalRef} className={concat('arm-validation-errors', className)} {...nativeProps}>\n      {validationErrors.map((error, i) => (\n        <div\n          className=\"arm-validation-error-message\"\n          key={getKey(error, i)}\n          aria-errormessage={typeof error === 'string' ? error : ''}\n        >\n          {shouldShowErrorMessage && <span>{error}</span>}\n        </div>\n      ))}\n    </div>\n  );\n});\n\nValidationErrors.displayName = 'ValidationErrors';\n"],"names":["ValidationErrors","React.forwardRef","validationErrors","className","scrollIntoView","validationMode","nativeProps","ref","globals","useArmstrongConfig","internalRef","React.useRef","React.useImperativeHandle","React.useEffect","_a","getKey","React.useCallback","error","index","shouldShowErrorMessage","jsx","concat"],"mappings":"oLA0BO,MAAAA,EAAAC,EAAAA,WAAA,CAAA,CAAA,iBAAAC,EAAA,UAAAC,EAAA,eAAAC,EAAA,eAAAC,EAAA,GAAAC,CAAA,EAAAC,IAAA,CAIL,MAAAC,EAAAC,EAAA,CAAmC,eAAAJ,EACjC,+BAAAD,CACgC,CAAA,EAGlCM,EAAAC,SAAA,IAAA,EACAC,EAAA,oBAAAL,EAAA,IAAAG,EAAA,QAAA,CAAAA,CAAA,CAAA,EAEAG,EAAAA,UAAA,IAAA,OACEX,EAAA,OAAA,GAAAM,EAAA,kCACEM,EAAAJ,EAAA,UAAA,MAAAI,EAAA,eAAA,CAAoC,MAAA,SAC3B,SAAA,QACG,GAEd,EAAA,CAAAZ,EAAA,OAAAM,EAAA,8BAAA,CAAA,EAIF,MAAAO,EAAAC,EAAAA,YAAA,CAAAC,EAAAC,IACE,OAAAD,GAAA,SACEA,EAAAC,GAEFD,GAAA,YAAAA,EAAA,MAAAC,EAAqB,CAAA,CAAA,EAGvBC,EAAAX,EAAA,iBAAA,QAAAA,EAAA,iBAAA,UAEA,OAAAY,EAAA,MAAA,CAAA,IAAAV,EAAA,UAAAW,EAAA,wBAAAlB,CAAA,EAAA,GAAAG,EAAA,SAAAJ,EAAA,IAAA,CAAAe,EAAA,IAAAG,EAGM,MAAC,CAAA,UAAA,+BACW,oBAAA,OAAAH,GAAA,SAAAA,EAAA,GAE6C,SAAAE,GAAAC,EAAA,OAAA,CAAA,SAAAH,EAAA,CAEf,EAAAF,EAAAE,EAAA,CAAA,CAHpB,CAAA,CAAA,CAAA,CAQ9B,CAAA,EAEAjB,EAAA,YAAA;"}