{"version":3,"file":"dialog.stories-602269df.js","sources":["../../src/components/dialog/dialog.hooks.ts"],"sourcesContent":["import * as React from 'react';\n\nimport { DialogElement } from './dialog.component';\n\n/** Error to throw if a dialog function is called but the ref is falsy */\nconst emptyRefError = new Error(\n  \"Dialog function called on an invalid dialog, are you sure you've added the ref to the Armstrong <Dialog> component?\"\n);\n\n/** Hook return tuple */\nexport type UseDialogReturn<TData> = [React.RefObject<DialogElement<TData>>, DialogElement<TData>];\n\n/**\n * A hook providing quick access to the utilities of an Armstrong Dialog component\n * @param forwardRef - A forwarded ref used to pass the dialog controls out of the component using this hook with `forwardRef`\n * @typedef {number} UseDialogReturn1 - A ref to assign to your Armstrong <Dialog> element\n * @typedef {number} UseDialogReturn2 - A dictionary of functions associated with the referenced Armstrong <Dialog> element\n * @typedef {[UseDialogReturn1, UseDialogReturn2]} UseDialogReturn\n * @returns {UseDialogReturn}\n */\nexport const useDialog = <TData>(\n  forwardRef?: React.ForwardedRef<DialogElement<TData>>\n): [React.RefObject<DialogElement<TData>>, DialogElement<TData>] => {\n  const dialogRef = React.useRef<DialogElement<TData>>(null);\n  React.useImperativeHandle(forwardRef, () => dialogRef.current as DialogElement<TData>);\n\n  /** These dialog actions are locked down to independent callbacks to avoid unwanted dependency mutation */\n  const open = React.useCallback(() => {\n    if (!dialogRef.current) {\n      throw emptyRefError;\n    }\n    return dialogRef.current.open();\n  }, []);\n\n  const cancel = React.useCallback(() => {\n    if (!dialogRef.current) {\n      throw emptyRefError;\n    }\n    return dialogRef.current.cancel();\n  }, []);\n\n  const close = React.useCallback(() => {\n    if (!dialogRef.current) {\n      throw emptyRefError;\n    }\n    return dialogRef.current.close();\n  }, []);\n\n  const ok = React.useCallback(() => {\n    if (!dialogRef.current) {\n      throw emptyRefError;\n    }\n    return dialogRef.current.ok();\n  }, []);\n\n  return [dialogRef, { open, cancel, close, ok }];\n};\n"],"names":["emptyRefError","useDialog","forwardRef","dialogRef","React.useRef","React.useImperativeHandle","open","React.useCallback","cancel","close","ok"],"mappings":"0jCAKA,MAAMA,EAAgB,IAAI,MACxB,qHACF,EAaaC,EACXC,GACkE,CAC5D,MAAAC,EAAYC,SAAmC,IAAI,EACzDC,EAAAA,oBAA0BH,EAAY,IAAMC,EAAU,OAA+B,EAG/E,MAAAG,EAAOC,EAAAA,YAAkB,IAAM,CAC/B,GAAA,CAACJ,EAAU,QACP,MAAAH,EAED,OAAAG,EAAU,QAAQ,MAC3B,EAAG,CAAE,CAAA,EAECK,EAASD,EAAAA,YAAkB,IAAM,CACjC,GAAA,CAACJ,EAAU,QACP,MAAAH,EAED,OAAAG,EAAU,QAAQ,QAC3B,EAAG,CAAE,CAAA,EAECM,EAAQF,EAAAA,YAAkB,IAAM,CAChC,GAAA,CAACJ,EAAU,QACP,MAAAH,EAED,OAAAG,EAAU,QAAQ,OAC3B,EAAG,CAAE,CAAA,EAECO,EAAKH,EAAAA,YAAkB,IAAM,CAC7B,GAAA,CAACJ,EAAU,QACP,MAAAH,EAED,OAAAG,EAAU,QAAQ,IAC3B,EAAG,CAAE,CAAA,EAEL,MAAO,CAACA,EAAW,CAAE,KAAAG,EAAM,OAAAE,EAAQ,MAAAC,EAAO,GAAAC,EAAI,CAChD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}