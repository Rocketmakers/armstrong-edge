import{j as o}from"./jsx-runtime-Cl2eCCBe.js";import{r as a}from"./index-Cqyox1Tj.js";import{c as f}from"./classNames-TtGgGdEV.js";import{u as h}from"./config.context-DSGy4VcJ.js";const t=a.forwardRef(({validationErrors:i,className:l,scrollIntoView:m,validationMode:d,...c},p)=>{const r=h({validationMode:d,scrollValidationErrorsIntoView:m}),s=a.useRef(null);a.useImperativeHandle(p,()=>s.current,[s]),a.useEffect(()=>{var e;i.length>0&&r.scrollValidationErrorsIntoView&&((e=s.current)==null||e.scrollIntoView({block:"center",behavior:"smooth"}))},[i.length,r.scrollValidationErrorsIntoView]);const g=a.useCallback((e,n)=>typeof e=="string"?e+n:(e==null?void 0:e.key)??n,[]),u=r.validationMode==="both"||r.validationMode==="message";return o.jsx("div",{ref:s,className:f("arm-validation-errors",l),...c,children:i.map((e,n)=>o.jsx("div",{className:"arm-validation-error-message","aria-errormessage":typeof e=="string"?e:"",children:u&&o.jsx("span",{children:e})},g(e,n)))})});t.displayName="ValidationErrors";t.__docgenInfo={description:"Render an array of validation errors as error messages",methods:[],displayName:"ValidationErrors",props:{validationErrors:{required:!0,tsType:{name:"Array",elements:[{name:"union",raw:"string | JSX.Element",elements:[{name:"string"},{name:"JSX.Element"}]}],raw:"ValidationMessage[]"},description:`The errors to render
Can be a string or {key, element} key is necessary for animating in new messages`},className:{required:!1,tsType:{name:"string"},description:"CSS className property"},scrollIntoView:{required:!1,tsType:{name:"boolean"},description:"will scroll the validation errors into view when the length of validationErrors changes"},validationMode:{required:!1,tsType:{name:"union",raw:"'icon' | 'message' | 'both'",elements:[{name:"literal",value:"'icon'"},{name:"literal",value:"'message'"},{name:"literal",value:"'both'"}]},description:"overrides the error messaging and icon display used in the error validation display"}}};export{t as V};
