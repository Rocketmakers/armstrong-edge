@use './variables.scss';

// psuedo elements

@mixin init-pseudo {
  display: block;
  content: '';
}

@mixin range-input-thumb {
  // an unusual limitation with browser specific selectors means that these all need to be
  // separate selectors and cannot be combined with commas (like a, b, c {} )
  &::-webkit-slider-thumb {
    @content;
  }

  &::-moz-range-thumb {
    @content;
  }

  &::-ms-thumb {
    @content;
  }
}

@mixin range-input-track {
  // an unusual limitation with browser specific selectors means that these all need to be
  // separate selectors and cannot be combined with commas (like a, b, c {} )
  &::-webkit-slider-runnable-track {
    @content;
  }

  &::-moz-range-track {
    @content;
  }

  &::-ms-track {
    @content;
  }
}

// layout

@mixin fill {
  height: 100%;
  width: 100%;
}

@mixin absolute-fill {
  @include fill;

  position: absolute;
  left: 0;
  top: 0;
}

@mixin fixed-fill {
  @include fill;

  position: fixed;
  left: 0;
  top: 0;
}

@mixin absolute-centre-self {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}

@mixin flex-centre-content {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-space-between-content {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin square($size) {
  width: $size;
  height: $size;
}

@mixin circle($size) {
  @include square($size);

  border-radius: 50%;
}

@mixin space-between-children-horizontal($spacing) {
  > *:not(:last-child) {
    margin-right: $spacing;
  }
}

@mixin space-between-children-vertical($spacing) {
  > *:not(:last-child) {
    margin-bottom: $spacing;
  }
}

// for use with flex-direction *-reverse

@mixin space-between-children-horizontal-reverse($spacing) {
  > *:not(:last-child) {
    margin-left: $spacing;
  }
}

@mixin space-between-children-vertical-reverse($spacing) {
  > *:not(:last-child) {
    margin-top: $spacing;
  }
}

@mixin object-contain {
  object-fit: contain;
  object-position: center;
}

@mixin object-cover {
  object-fit: cover;
  object-position: center;
}

// responsiveness

@mixin screen-width-max($screen-width: variables.$screen-size-phone) {
  @media screen and (max-width: $screen-width) {
    @content;
  }
}

@mixin screen-width-min($screen-width: variables.$screen-size-phone) {
  @media screen and (min-width: $screen-width) {
    @content;
  }
}

@mixin screen-tablet {
  @include screen-width-max(variables.$screen-size-tablet) {
    @content;
  }
}

@mixin screen-phone {
  @include screen-width-max(variables.$screen-size-phone) {
    @content;
  }
}

@mixin screen-not-phone {
  @include screen-width-min(variables.$screen-size-phone) {
    @content;
  }
}
